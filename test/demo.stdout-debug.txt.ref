Debug trace ON
char '0'
stackarg 0 (@0)
0MEMORYADDR0 ;;;

0MEMORYADDR0 ;

0MEMORYADDR0 ;   Some useful macros and techniques

0MEMORYADDR0 ;

0MEMORYADDR0 	processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;;;

0MEMORYADDR0 	mac	hexdig

0MEMORYADDR0 

0MEMORYADDR0 	if [{1}] <= 9

0MEMORYADDR0 	    dc.b	'0 + [{1}]

0MEMORYADDR0 	else

0MEMORYADDR0 	    dc.b	'a + [{1}] - 10

0MEMORYADDR0 	endif

0MEMORYADDR0 

0MEMORYADDR0 	endm

0MEMORYADDR0 ;;;

0MEMORYADDR0 	mac	hexnum

0MEMORYADDR0 

0MEMORYADDR0 	if [{1}] >= $10

0MEMORYADDR0 	    hexnum [{1}] >> 4

0MEMORYADDR0 	endif

0MEMORYADDR0 	hexdig [{1}] & $0F

0MEMORYADDR0 

0MEMORYADDR0 	endm

0MEMORYADDR0 ;;;

0MEMORYADDR0 

0MEMORYADDR0 	org 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 	hexnum $123ab

0MEMORYADDR0 
0MEMORYADDR0  if [{1}] >= $10
macro tail: '{1}] >= $10'
add/str: -3 '] >= $10'
strlist: '$123ab' 6
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '$'
stackarg 16 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      hexnum [{1}] >> 4
macro tail: '{1}] >> 4'
add/str: -3 '] >> 4'
strlist: '$123ab' 6
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] >= $10
macro tail: '{1}] >= $10'
add/str: -3 '] >= $10'
strlist: '[$123ab] >> 4' 13
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 1
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '$'
stackarg 16 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      hexnum [{1}] >> 4
macro tail: '{1}] >> 4'
add/str: -3 '] >> 4'
strlist: '[$123ab] >> 4' 13
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] >= $10
macro tail: '{1}] >= $10'
add/str: -3 '] >= $10'
strlist: '[[$123ab] >> 4] >> 4' 20
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 1
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 291 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '$'
stackarg 16 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      hexnum [{1}] >> 4
macro tail: '{1}] >> 4'
add/str: -3 '] >> 4'
strlist: '[[$123ab] >> 4] >> 4' 20
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] >= $10
macro tail: '{1}] >= $10'
add/str: -3 '] >= $10'
strlist: '[[[$123ab] >> 4] >> 4] >> 4' 27
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 4
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 291 (@0)
char ' '
char '>'
doop
doop @ 1
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 18 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '$'
stackarg 16 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      hexnum [{1}] >> 4
macro tail: '{1}] >> 4'
add/str: -3 '] >> 4'
strlist: '[[[$123ab] >> 4] >> 4] >> 4' 27
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] >= $10
macro tail: '{1}] >= $10'
add/str: -3 '] >= $10'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] >> 4' 34
char '['
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 5
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 4
stackarg 291 (@0)
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 18 (@0)
char ' '
char '>'
doop
doop @ 1
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 1 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '$'
stackarg 16 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0      hexnum [{1}] >> 4
macro tail: '{1}] >> 4'
add/str: -3 '] >> 4'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] >> 4' 34
0MEMORYADDR0  endif
0MEMORYADDR0  hexdig [{1}] & $0F
macro tail: '{1}] & $0F'
add/str: -3 '] & $0F'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] >> 4' 34
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] <= 9
macro tail: '{1}] <= 9'
add/str: -3 '] <= 9'
strlist: '[[[[[$123ab] >> 4] >> 4] >> 4] >> 4] & $0F' 42
char '['
char '['
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 5
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 6
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 5
stackarg 291 (@0)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 4
stackarg 18 (@0)
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 1 (@0)
char ' '
char '&'
doop
doop @ 1
char ' '
char '$'
stackarg 15 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 1 (@0)
char ' '
char '<'
doop
doop @ 0 unary
char ' '
char '9'
stackarg 9 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      dc.b '0 + [{1}]
macro tail: '{1}]'
add/str: -3 ']'
strlist: '[[[[[$123ab] >> 4] >> 4] >> 4] >> 4] & $0F' 42
char '''
stackarg 48 (@0)
char ' '
char '+'
doop
doop @ 0 unary
char ' '
char '['
char '['
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@1)
char ']'
char ' '
char '>'
doop
doop @ 6
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 7
stackarg 4666 (@1)
char ' '
char '>'
doop
doop @ 5
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 6
stackarg 291 (@1)
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 5
stackarg 18 (@1)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 4
stackarg 1 (@1)
char ' '
char '&'
doop
doop @ 2
char ' '
char '$'
stackarg 15 (@2)
char ']'
evaltop @(A,O) 3 3
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 49 (@0)
0MEMORYADDR0  else
0MEMORYADDR0      dc.b 'a + [{1}] - 10
macro tail: '{1}] - 10'
add/str: -3 '] - 10'
strlist: '[[[[[$123ab] >> 4] >> 4] >> 4] >> 4] & $0F' 42
0MEMORYADDR0  endif
0MEMORYADDR0 
0MEMORYADDR0 
0MEMORYADDR0  endif
0MEMORYADDR0  hexdig [{1}] & $0F
macro tail: '{1}] & $0F'
add/str: -3 '] & $0F'
strlist: '[[[$123ab] >> 4] >> 4] >> 4' 27
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] <= 9
macro tail: '{1}] <= 9'
add/str: -3 '] <= 9'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] & $0F' 35
char '['
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 5
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 4
stackarg 291 (@0)
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 18 (@0)
char ' '
char '&'
doop
doop @ 1
char ' '
char '$'
stackarg 15 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 2 (@0)
char ' '
char '<'
doop
doop @ 0 unary
char ' '
char '9'
stackarg 9 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      dc.b '0 + [{1}]
macro tail: '{1}]'
add/str: -3 ']'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] & $0F' 35
char '''
stackarg 48 (@0)
char ' '
char '+'
doop
doop @ 0 unary
char ' '
char '['
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@1)
char ']'
char ' '
char '>'
doop
doop @ 5
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 6
stackarg 4666 (@1)
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 5
stackarg 291 (@1)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 4
stackarg 18 (@1)
char ' '
char '&'
doop
doop @ 2
char ' '
char '$'
stackarg 15 (@2)
char ']'
evaltop @(A,O) 3 3
stackarg 2 (@1)
evaltop @(A,O) 2 1
stackarg 50 (@0)
0MEMORYADDR0  else
0MEMORYADDR0      dc.b 'a + [{1}] - 10
macro tail: '{1}] - 10'
add/str: -3 '] - 10'
strlist: '[[[[$123ab] >> 4] >> 4] >> 4] & $0F' 35
0MEMORYADDR0  endif
0MEMORYADDR0 
0MEMORYADDR0 
0MEMORYADDR0  endif
0MEMORYADDR0  hexdig [{1}] & $0F
macro tail: '{1}] & $0F'
add/str: -3 '] & $0F'
strlist: '[[$123ab] >> 4] >> 4' 20
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] <= 9
macro tail: '{1}] <= 9'
add/str: -3 '] <= 9'
strlist: '[[[$123ab] >> 4] >> 4] & $0F' 28
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 4
stackarg 4666 (@0)
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 291 (@0)
char ' '
char '&'
doop
doop @ 1
char ' '
char '$'
stackarg 15 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 3 (@0)
char ' '
char '<'
doop
doop @ 0 unary
char ' '
char '9'
stackarg 9 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0      dc.b '0 + [{1}]
macro tail: '{1}]'
add/str: -3 ']'
strlist: '[[[$123ab] >> 4] >> 4] & $0F' 28
char '''
stackarg 48 (@0)
char ' '
char '+'
doop
doop @ 0 unary
char ' '
char '['
char '['
char '['
char '['
char '$'
stackarg 74667 (@1)
char ']'
char ' '
char '>'
doop
doop @ 4
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 5
stackarg 4666 (@1)
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 4
stackarg 291 (@1)
char ' '
char '&'
doop
doop @ 2
char ' '
char '$'
stackarg 15 (@2)
char ']'
evaltop @(A,O) 3 3
stackarg 3 (@1)
evaltop @(A,O) 2 1
stackarg 51 (@0)
0MEMORYADDR0  else
0MEMORYADDR0      dc.b 'a + [{1}] - 10
macro tail: '{1}] - 10'
add/str: -3 '] - 10'
strlist: '[[[$123ab] >> 4] >> 4] & $0F' 28
0MEMORYADDR0  endif
0MEMORYADDR0 
0MEMORYADDR0 
0MEMORYADDR0  endif
0MEMORYADDR0  hexdig [{1}] & $0F
macro tail: '{1}] & $0F'
add/str: -3 '] & $0F'
strlist: '[$123ab] >> 4' 13
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] <= 9
macro tail: '{1}] <= 9'
add/str: -3 '] <= 9'
strlist: '[[$123ab] >> 4] & $0F' 21
char '['
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '>'
doop
doop @ 2
char ' '
char '4'
stackarg 4 (@1)
char ']'
evaltop @(A,O) 2 3
stackarg 4666 (@0)
char ' '
char '&'
doop
doop @ 1
char ' '
char '$'
stackarg 15 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 10 (@0)
char ' '
char '<'
doop
doop @ 0 unary
char ' '
char '9'
stackarg 9 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0      dc.b '0 + [{1}]
macro tail: '{1}]'
add/str: -3 ']'
strlist: '[[$123ab] >> 4] & $0F' 21
0MEMORYADDR0  else
0MEMORYADDR0      dc.b 'a + [{1}] - 10
macro tail: '{1}] - 10'
add/str: -3 '] - 10'
strlist: '[[$123ab] >> 4] & $0F' 21
char '''
stackarg 97 (@0)
char ' '
char '+'
doop
doop @ 0 unary
char ' '
char '['
char '['
char '['
char '$'
stackarg 74667 (@1)
char ']'
char ' '
char '>'
doop
doop @ 3
char ' '
char '4'
stackarg 4 (@2)
char ']'
evaltop @(A,O) 3 4
stackarg 4666 (@1)
char ' '
char '&'
doop
doop @ 2
char ' '
char '$'
stackarg 15 (@2)
char ']'
evaltop @(A,O) 3 3
stackarg 10 (@1)
char ' '
char '-'
doop
evaltop @(A,O) 2 1
stackarg 107 (@0)
doop @ 0
char ' '
char '1'
stackarg 10 (@1)
evaltop @(A,O) 2 1
stackarg 97 (@0)
0MEMORYADDR0  endif
0MEMORYADDR0 
0MEMORYADDR0 
0MEMORYADDR0  endif
0MEMORYADDR0  hexdig [{1}] & $0F
macro tail: '{1}] & $0F'
add/str: -3 '] & $0F'
strlist: '$123ab' 6
0MEMORYADDR0 
0MEMORYADDR0  if [{1}] <= 9
macro tail: '{1}] <= 9'
add/str: -3 '] <= 9'
strlist: '[$123ab] & $0F' 14
char '['
char '['
char '$'
stackarg 74667 (@0)
char ']'
char ' '
char '&'
doop
doop @ 1
char ' '
char '$'
stackarg 15 (@1)
char ']'
evaltop @(A,O) 2 2
stackarg 11 (@0)
char ' '
char '<'
doop
doop @ 0 unary
char ' '
char '9'
stackarg 9 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0      dc.b '0 + [{1}]
macro tail: '{1}]'
add/str: -3 ']'
strlist: '[$123ab] & $0F' 14
0MEMORYADDR0  else
0MEMORYADDR0      dc.b 'a + [{1}] - 10
macro tail: '{1}] - 10'
add/str: -3 '] - 10'
strlist: '[$123ab] & $0F' 14
char '''
stackarg 97 (@0)
char ' '
char '+'
doop
doop @ 0 unary
char ' '
char '['
char '['
char '$'
stackarg 74667 (@1)
char ']'
char ' '
char '&'
doop
doop @ 2
char ' '
char '$'
stackarg 15 (@2)
char ']'
evaltop @(A,O) 3 3
stackarg 11 (@1)
char ' '
char '-'
doop
evaltop @(A,O) 2 1
stackarg 108 (@0)
doop @ 0
char ' '
char '1'
stackarg 10 (@1)
evaltop @(A,O) 2 1
stackarg 98 (@0)
0MEMORYADDR0  endif
0MEMORYADDR0 
0MEMORYADDR0 
0MEMORYADDR0 

0MEMORYADDR0 ;;;;

0MEMORYADDR0 ;

0MEMORYADDR0 ;	Using an uninitialised segment to create C-like 'struct's.

0MEMORYADDR0 ;	(idea taken from IBM-370 assembler style "dummy segments")

0MEMORYADDR0 

0MEMORYADDR0 	seg.u	node

0MEMORYADDR0 	org 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 s_next	ds.b	2	; a node has a pointer to the next one

char '2'
stackarg 2 (@0)
0MEMORYADDR0 s_data	ds.b	2	; and 2 bytes of data

char '2'
stackarg 2 (@0)
0MEMORYADDR0 s_more	ds.b	3	; and 3 bytes of something more

char '3'
stackarg 3 (@0)
0MEMORYADDR0 

0MEMORYADDR0 	seg	code

0MEMORYADDR0 

0MEMORYADDR0 ptr	equ	42	; dummy value

char '4'
stackarg 42 (@0)
0MEMORYADDR0 	ldy #s_data

char '#'
char 's'
stackarg 2 (@0)
segment: code 0000 ????               vs current org: 0005

Aborting assembly
demo.asm (46): error: Origin Reverse-indexed.

