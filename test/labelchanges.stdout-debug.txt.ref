Debug trace ON
char '0'
stackarg 0 (@0)
0MEMORYADDR0 ; labelchanges.asm - test various cases of labels changing location in 

0MEMORYADDR0 ; successive passes. Test code provided by Thomas Jentzsch.

0MEMORYADDR0 

0MEMORYADDR0     processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0   ; automatically decide whether to use a branch or a jump

0MEMORYADDR0   MAC BNEJ

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129

0MEMORYADDR0       bne    {1}

0MEMORYADDR0     ELSE

0MEMORYADDR0       beq    skip$

0MEMORYADDR0       jmp    {1}

0MEMORYADDR0 skip$

0MEMORYADDR0     ENDIF

0MEMORYADDR0   ENDM

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0     ORG     $1000

char '$'
stackarg 4096 (@0)
0MEMORYADDR0 

0MEMORYADDR0 BackOk

0MEMORYADDR0     ds      126, $ea

char '1'
stackarg 126 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackOk' 6
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackOk' 6
char '('
char 'B'
stackarg 4096 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4222 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -126 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4096 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4222 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -126 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
char 'B'
stackarg 4096 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0 BackJmp

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     ds      126+1, $ea

char '1'
stackarg 126 (@0)
char '+'
doop
doop @ 0 unary
char '1'
stackarg 1 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 127 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackJmp' 7
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackJmp' 7
char '('
char 'B'
stackarg 4224 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4351 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4224 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4351 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 0 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
char 'B'
stackarg 4224 (@0)
0MEMORYADDR0 skip$
redo 13: '4$skip$' 0045 0004
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0     ; this can use "bne"

0MEMORYADDR0     BNEJ    ForwardOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardOk' 9
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardOk' 9
char '('
char 'F'
stackarg 0 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4356 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -4356 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 0 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4356 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -4356 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127, $ea

char '1'
stackarg 127 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardOk

redo 13: 'ForwardOk' 0045 0004
0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp' 10
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp' 10
char '('
char 'F'
stackarg 0 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4483 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -4483 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 0 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4483 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -4483 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+3, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '3'
stackarg 3 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 130 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp

redo 13: 'ForwardJmp' 0045 0004
0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp2

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp2' 11
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp2' 11
char '('
char 'F'
stackarg 0 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4613 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -4613 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 0 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4613 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -4613 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+2, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '2'
stackarg 2 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 129 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp2

redo 13: 'ForwardJmp2' 0045 0004
0MEMORYADDR0 ; labelchanges.asm - test various cases of labels changing location in 

0MEMORYADDR0 ; successive passes. Test code provided by Thomas Jentzsch.

0MEMORYADDR0 

0MEMORYADDR0     processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0   ; automatically decide whether to use a branch or a jump

0MEMORYADDR0   MAC BNEJ

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129

0MEMORYADDR0       bne    {1}

0MEMORYADDR0     ELSE

0MEMORYADDR0       beq    skip$

0MEMORYADDR0       jmp    {1}

0MEMORYADDR0 skip$

0MEMORYADDR0     ENDIF

0MEMORYADDR0   ENDM

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0     ORG     $1000

char '$'
stackarg 4096 (@0)
0MEMORYADDR0 

0MEMORYADDR0 BackOk

0MEMORYADDR0     ds      126, $ea

char '1'
stackarg 126 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackOk' 6
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackOk' 6
char '('
char 'B'
stackarg 4096 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4222 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -126 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4096 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4222 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -126 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
char 'B'
stackarg 4096 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0 BackJmp

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     ds      126+1, $ea

char '1'
stackarg 126 (@0)
char '+'
doop
doop @ 0 unary
char '1'
stackarg 1 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 127 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackJmp' 7
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackJmp' 7
char '('
char 'B'
stackarg 4224 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4351 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4224 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4351 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4356 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
char 'B'
stackarg 4224 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0     ; this can use "bne"

0MEMORYADDR0     BNEJ    ForwardOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardOk' 9
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardOk' 9
char '('
char 'F'
stackarg 4483 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4356 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4483 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4356 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
char 'F'
stackarg 4483 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127, $ea

char '1'
stackarg 127 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardOk

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp' 10
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp' 10
char '('
char 'F'
stackarg 4613 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4485 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 128 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4613 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4485 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 128 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
char 'F'
stackarg 4613 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+3, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '3'
stackarg 3 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 130 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp2

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp2' 11
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp2' 11
char '('
char 'F'
stackarg 4742 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4617 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 125 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4742 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4617 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 125 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
char 'F'
stackarg 4742 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+2, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '2'
stackarg 2 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 129 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp2

0MEMORYADDR0 ; labelchanges.asm - test various cases of labels changing location in 

0MEMORYADDR0 ; successive passes. Test code provided by Thomas Jentzsch.

0MEMORYADDR0 

0MEMORYADDR0     processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0   ; automatically decide whether to use a branch or a jump

0MEMORYADDR0   MAC BNEJ

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129

0MEMORYADDR0       bne    {1}

0MEMORYADDR0     ELSE

0MEMORYADDR0       beq    skip$

0MEMORYADDR0       jmp    {1}

0MEMORYADDR0 skip$

0MEMORYADDR0     ENDIF

0MEMORYADDR0   ENDM

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0     ORG     $1000

char '$'
stackarg 4096 (@0)
0MEMORYADDR0 

0MEMORYADDR0 BackOk

0MEMORYADDR0     ds      126, $ea

char '1'
stackarg 126 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackOk' 6
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackOk' 6
char '('
char 'B'
stackarg 4096 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4222 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -126 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4096 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4222 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -126 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
char 'B'
stackarg 4096 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0 BackJmp

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     ds      126+1, $ea

char '1'
stackarg 126 (@0)
char '+'
doop
doop @ 0 unary
char '1'
stackarg 1 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 127 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackJmp' 7
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackJmp' 7
char '('
char 'B'
stackarg 4224 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4351 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4224 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4351 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4356 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
char 'B'
stackarg 4224 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0     ; this can use "bne"

0MEMORYADDR0     BNEJ    ForwardOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardOk' 9
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardOk' 9
char '('
char 'F'
stackarg 4485 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4356 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 129 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4485 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4356 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 129 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
char 'F'
stackarg 4485 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127, $ea

char '1'
stackarg 127 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardOk

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp' 10
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp' 10
char '('
char 'F'
stackarg 4617 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4485 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 132 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4617 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4485 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 132 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 0 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 0 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
char 'F'
stackarg 4617 (@0)
0MEMORYADDR0 skip$
redo 13: '7$skip$' 0045 0004
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+3, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '3'
stackarg 3 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 130 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp2

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp2' 11
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp2' 11
char '('
char 'F'
stackarg 4748 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4620 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 128 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4748 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4620 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 128 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
char 'F'
stackarg 4748 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+2, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '2'
stackarg 2 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 129 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp2

0MEMORYADDR0 ; labelchanges.asm - test various cases of labels changing location in 

0MEMORYADDR0 ; successive passes. Test code provided by Thomas Jentzsch.

0MEMORYADDR0 

0MEMORYADDR0     processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0   ; automatically decide whether to use a branch or a jump

0MEMORYADDR0   MAC BNEJ

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129

0MEMORYADDR0       bne    {1}

0MEMORYADDR0     ELSE

0MEMORYADDR0       beq    skip$

0MEMORYADDR0       jmp    {1}

0MEMORYADDR0 skip$

0MEMORYADDR0     ENDIF

0MEMORYADDR0   ENDM

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0     ORG     $1000

char '$'
stackarg 4096 (@0)
0MEMORYADDR0 

0MEMORYADDR0 BackOk

0MEMORYADDR0     ds      126, $ea

char '1'
stackarg 126 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackOk' 6
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackOk' 6
char '('
char 'B'
stackarg 4096 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4222 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -126 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4096 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4222 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -126 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
char 'B'
stackarg 4096 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0 BackJmp

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     ds      126+1, $ea

char '1'
stackarg 126 (@0)
char '+'
doop
doop @ 0 unary
char '1'
stackarg 1 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 127 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackJmp' 7
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackJmp' 7
char '('
char 'B'
stackarg 4224 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4351 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4224 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4351 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4356 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
char 'B'
stackarg 4224 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0     ; this can use "bne"

0MEMORYADDR0     BNEJ    ForwardOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardOk' 9
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardOk' 9
char '('
char 'F'
stackarg 4485 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4356 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 129 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4485 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4356 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 129 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
char 'F'
stackarg 4485 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127, $ea

char '1'
stackarg 127 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardOk

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp' 10
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp' 10
char '('
char 'F'
stackarg 4620 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4485 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 135 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4620 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4485 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 135 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 0 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4490 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
char 'F'
stackarg 4620 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+3, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '3'
stackarg 3 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 130 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp2

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp2' 11
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp2' 11
char '('
char 'F'
stackarg 4751 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4620 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 131 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4751 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4620 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 131 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 0 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 0 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
char 'F'
stackarg 4751 (@0)
0MEMORYADDR0 skip$
redo 13: '9$skip$' 0045 0004
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+2, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '2'
stackarg 2 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 129 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp2

0MEMORYADDR0 ; labelchanges.asm - test various cases of labels changing location in 

0MEMORYADDR0 ; successive passes. Test code provided by Thomas Jentzsch.

0MEMORYADDR0 

0MEMORYADDR0     processor 6502

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0   ; automatically decide whether to use a branch or a jump

0MEMORYADDR0   MAC BNEJ

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129

0MEMORYADDR0       bne    {1}

0MEMORYADDR0     ELSE

0MEMORYADDR0       beq    skip$

0MEMORYADDR0       jmp    {1}

0MEMORYADDR0 skip$

0MEMORYADDR0     ENDIF

0MEMORYADDR0   ENDM

0MEMORYADDR0 

0MEMORYADDR0 ;===============================================================================

0MEMORYADDR0 

0MEMORYADDR0     ORG     $1000

char '$'
stackarg 4096 (@0)
0MEMORYADDR0 

0MEMORYADDR0 BackOk

0MEMORYADDR0     ds      126, $ea

char '1'
stackarg 126 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackOk' 6
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackOk' 6
char '('
char 'B'
stackarg 4096 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4222 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -126 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4096 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4222 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -126 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
char 'B'
stackarg 4096 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackOk' 6
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0 BackJmp

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     ds      126+1, $ea

char '1'
stackarg 126 (@0)
char '+'
doop
doop @ 0 unary
char '1'
stackarg 1 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 127 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0     BNEJ    BackJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'BackJmp' 7
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'BackJmp' 7
char '('
char 'B'
stackarg 4224 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4351 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg -127 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 0 (@0)
doop @ 0
char ' '
char '('
char 'B'
stackarg 4224 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4351 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg -127 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4356 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'BackJmp' 7
char 'B'
stackarg 4224 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0 

0MEMORYADDR0     ; this can use "bne"

0MEMORYADDR0     BNEJ    ForwardOk

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardOk' 9
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardOk' 9
char '('
char 'F'
stackarg 4485 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4356 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 129 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4485 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4356 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 129 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 1 (@1)
evaltop @(A,O) 2 1
stackarg 1 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
char 'F'
stackarg 4485 (@0)
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardOk' 9
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127, $ea

char '1'
stackarg 127 (@0)
char ','
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardOk

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp' 10
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp' 10
char '('
char 'F'
stackarg 4620 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4485 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 135 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4620 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4485 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 135 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 0 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4490 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp' 10
char 'F'
stackarg 4620 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+3, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '3'
stackarg 3 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 130 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp

0MEMORYADDR0 

0MEMORYADDR0     ; this has to use "jmp"

0MEMORYADDR0     ; and is detected as such

0MEMORYADDR0     BNEJ    ForwardJmp2

0MEMORYADDR0     IF ({1} - .) >= -126 && ({1} - .) <= 129
macro tail: '{1} - .) >= -126 && ({1} - .) <= 129'
add/str: -3 ' - .) >= -126 && ({1} - .) <= 129'
strlist: 'ForwardJmp2' 11
macro tail: '{1} - .) <= 129'
add/str: -3 ' - .) <= 129'
strlist: 'ForwardJmp2' 11
char '('
char 'F'
stackarg 4754 (@0)
char ' '
char '-'
doop
doop @ 1
char ' '
char '.'
stackarg 4620 (@1)
char ')'
evaltop @(A,O) 2 2
stackarg 134 (@0)
char ' '
char '>'
doop
doop @ 0 unary
char ' '
char '-'
doop
doop @ 1 unary
char '1'
stackarg 126 (@1)
evaltop @(A,O) 2 2
stackarg -126 (@1)
char ' '
char '&'
doop
evaltop @(A,O) 2 1
stackarg 1 (@0)
doop @ 0
char ' '
char '('
char 'F'
stackarg 4754 (@1)
char ' '
char '-'
doop
doop @ 2
char ' '
char '.'
stackarg 4620 (@2)
char ')'
evaltop @(A,O) 3 3
stackarg 134 (@1)
char ' '
char '<'
doop
doop @ 1
char ' '
char '1'
stackarg 129 (@2)
evaltop @(A,O) 3 2
stackarg 0 (@1)
evaltop @(A,O) 2 1
stackarg 0 (@0)
0MEMORYADDR0       bne    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
0MEMORYADDR0     ELSE
0MEMORYADDR0       beq    skip$
char 's'
stackarg 4625 (@0)
0MEMORYADDR0       jmp    {1}
macro tail: '{1}'
add/str: -3 ''
strlist: 'ForwardJmp2' 11
char 'F'
stackarg 4754 (@0)
0MEMORYADDR0 skip$
0MEMORYADDR0     ENDIF
0MEMORYADDR0     ds      127+2, $ea

char '1'
stackarg 127 (@0)
char '+'
doop
doop @ 0 unary
char '2'
stackarg 2 (@1)
char ','
evaltop @(A,O) 2 1
stackarg 129 (@0)
char ' '
char '$'
stackarg 234 (@0)
0MEMORYADDR0 ForwardJmp2


Complete.
