Debug trace ON
char '0'
stackarg 0 (@0)
0MEMORYADDR0 ;---------------------------------------------------------------

0MEMORYADDR0 ;

0MEMORYADDR0 ; Rudimentary output, part 3

0MEMORYADDR0 ; 

0MEMORYADDR0 ; Display the result of a math operation (using RAM this time!)

0MEMORYADDR0 ;

0MEMORYADDR0 ;---------------------------------------------------------------

0MEMORYADDR0 

0MEMORYADDR0         processor 6502

0MEMORYADDR0         include "../_includes/vcs.h"

char '"'
stackarg 0 (@0)
STRING: ../_includes/vcs.h
Warning: Unable to open '../_includes/vcs.h'
0MEMORYADDR0         include "../_includes/macro.h"

char '"'
stackarg 0 (@0)
STRING: ../_includes/macro.h
Warning: Unable to open '../_includes/macro.h'
0MEMORYADDR0 

0MEMORYADDR0 		

0MEMORYADDR0         ; Color constants

0MEMORYADDR0 MyBGCol equ $06

char '$'
stackarg 6 (@0)
0MEMORYADDR0 MyPFCol equ $46

char '$'
stackarg 70 (@0)
0MEMORYADDR0 

0MEMORYADDR0         ; Define two memory locations

0MEMORYADDR0 Num1    equ $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 Num2    equ $81

char '$'
stackarg 129 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0         org $F000

char '$'
stackarg 61440 (@0)
0MEMORYADDR0         

0MEMORYADDR0 Start   CLEAN_START 

0MEMORYADDR0 

0MEMORYADDR0         ; Set colors

0MEMORYADDR0         lda #MyBGCol

char '#'
char 'M'
stackarg 6 (@0)
0MEMORYADDR0         sta COLUBK

char 'C'
stackarg 0 (@0)
0MEMORYADDR0         lda #MyPFCol

char '#'
char 'M'
stackarg 70 (@0)
0MEMORYADDR0         sta COLUPF

char 'C'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0         ; Load first number into memory

0MEMORYADDR0         lda #4          ; Load A with 2

char '#'
char '4'
stackarg 4 (@0)
0MEMORYADDR0         sta Num1        ; Store contents of A in address Num1

char 'N'
stackarg 128 (@0)
0MEMORYADDR0         

0MEMORYADDR0         ; Load second number into memory

0MEMORYADDR0         lda #5

char '#'
char '5'
stackarg 5 (@0)
0MEMORYADDR0         sta Num2

char 'N'
stackarg 129 (@0)
0MEMORYADDR0 		

0MEMORYADDR0         ; We can add 4 & 5 by referencing memory:

0MEMORYADDR0         lda Num1        ; Put Num1 in A

char 'N'
stackarg 128 (@0)
0MEMORYADDR0         clc             ; ALWAYS clear carry before an add!

0MEMORYADDR0         adc Num2        ; Add Num2 to A

char 'N'
stackarg 129 (@0)
0MEMORYADDR0         sta PF1         ; Show the binary result

char 'P'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 Endless nop

0MEMORYADDR0         jmp Endless

char 'E'
stackarg 61466 (@0)
0MEMORYADDR0 

0MEMORYADDR0         org $FFFC

char '$'
stackarg 65532 (@0)
0MEMORYADDR0         .word Start

char 'S'
stackarg 0 (@0)
0MEMORYADDR0         .word Start

char 'S'
stackarg 0 (@0)
0MEMORYADDR0 ;---------------------------------------------------------------

0MEMORYADDR0 ;

0MEMORYADDR0 ; Rudimentary output, part 3

0MEMORYADDR0 ; 

0MEMORYADDR0 ; Display the result of a math operation (using RAM this time!)

0MEMORYADDR0 ;

0MEMORYADDR0 ;---------------------------------------------------------------

0MEMORYADDR0 

0MEMORYADDR0         processor 6502

0MEMORYADDR0         include "../_includes/vcs.h"

char '"'
stackarg 0 (@0)
STRING: ../_includes/vcs.h
Warning: Unable to open '../_includes/vcs.h'
0MEMORYADDR0         include "../_includes/macro.h"

char '"'
stackarg 0 (@0)
STRING: ../_includes/macro.h
Warning: Unable to open '../_includes/macro.h'
0MEMORYADDR0 

0MEMORYADDR0 		

0MEMORYADDR0         ; Color constants

0MEMORYADDR0 MyBGCol equ $06

char '$'
stackarg 6 (@0)
0MEMORYADDR0 MyPFCol equ $46

char '$'
stackarg 70 (@0)
0MEMORYADDR0 

0MEMORYADDR0         ; Define two memory locations

0MEMORYADDR0 Num1    equ $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 Num2    equ $81

char '$'
stackarg 129 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0         org $F000

char '$'
stackarg 61440 (@0)
0MEMORYADDR0         

0MEMORYADDR0 Start   CLEAN_START 

0MEMORYADDR0 

0MEMORYADDR0         ; Set colors

0MEMORYADDR0         lda #MyBGCol

char '#'
char 'M'
stackarg 6 (@0)
0MEMORYADDR0         sta COLUBK

char 'C'
stackarg 0 (@0)
0MEMORYADDR0         lda #MyPFCol

char '#'
char 'M'
stackarg 70 (@0)
0MEMORYADDR0         sta COLUPF

char 'C'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0         ; Load first number into memory

0MEMORYADDR0         lda #4          ; Load A with 2

char '#'
char '4'
stackarg 4 (@0)
0MEMORYADDR0         sta Num1        ; Store contents of A in address Num1

char 'N'
stackarg 128 (@0)
0MEMORYADDR0         

0MEMORYADDR0         ; Load second number into memory

0MEMORYADDR0         lda #5

char '#'
char '5'
stackarg 5 (@0)
0MEMORYADDR0         sta Num2

char 'N'
stackarg 129 (@0)
0MEMORYADDR0 		

0MEMORYADDR0         ; We can add 4 & 5 by referencing memory:

0MEMORYADDR0         lda Num1        ; Put Num1 in A

char 'N'
stackarg 128 (@0)
0MEMORYADDR0         clc             ; ALWAYS clear carry before an add!

0MEMORYADDR0         adc Num2        ; Add Num2 to A

char 'N'
stackarg 129 (@0)
0MEMORYADDR0         sta PF1         ; Show the binary result

char 'P'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 Endless nop

0MEMORYADDR0         jmp Endless

char 'E'
stackarg 61466 (@0)
0MEMORYADDR0 

0MEMORYADDR0         org $FFFC

char '$'
stackarg 65532 (@0)
0MEMORYADDR0         .word Start

char 'S'
stackarg 0 (@0)
0MEMORYADDR0         .word Start

char 'S'
stackarg 0 (@0)
--- Unresolved Symbol List
COLUBK                   0000 ????         (R )
PF1                      0000 ????         (R )
COLUPF                   0000 ????         (R )
Start                    0000 ????         (R )
--- 4 Unresolved Symbols


jeff-jetton-examples/rudout3.asm (25): error: Unknown Mnemonic 'CLEAN_START'.

Fatal assembly error: Source is not resolvable.
