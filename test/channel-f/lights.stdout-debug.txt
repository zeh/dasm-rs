Debug trace ON
char '0'
stackarg 0 (@0)
0MEMORYADDR0 ; Sean Riddle's lights.asm, the first reallife program ever assembled

0MEMORYADDR0 ; by dasm2. The usual modifications to f8tool source were needed:

0MEMORYADDR0 ; - Needed to add the processor directive at the top of the source.

0MEMORYADDR0 ; - Needed to indent the org directives because dasm2 would parse

0MEMORYADDR0 ;   them as labels.

0MEMORYADDR0 ; - The first org directive sets the org fill value to 0, since this

0MEMORYADDR0 ;   is what f8tool uses and the reference binary was assembled with

0MEMORYADDR0 ;   f8tool.

0MEMORYADDR0 ;

0MEMORYADDR0 ;lights out

0MEMORYADDR0 ;by Sean Riddle

0MEMORYADDR0 ;6/2004

0MEMORYADDR0 ;members.cox.net/seanriddle

0MEMORYADDR0 ;

0MEMORYADDR0 ; Copyright (C) 2004 Sean Riddle (members.cox.net/seanriddle)

0MEMORYADDR0 ;

0MEMORYADDR0 ; lights is free software; you can redistribute it and/or modify

0MEMORYADDR0 ; it under the terms of the GNU General Public License as published by

0MEMORYADDR0 ; the Free Software Foundation; either version 2 of the License, or

0MEMORYADDR0 ; (at your option) any later version.

0MEMORYADDR0 ;

0MEMORYADDR0 ; lights is distributed in the hope that it will be useful,

0MEMORYADDR0 ; but WITHOUT ANY WARRANTY; without even the implied warranty of

0MEMORYADDR0 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

0MEMORYADDR0 ; GNU General Public License for more details.

0MEMORYADDR0 ;

0MEMORYADDR0 ; You should have received a copy of the GNU General Public License

0MEMORYADDR0 ; along with lights; if not, write to the Free Software

0MEMORYADDR0 ; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

0MEMORYADDR0 

0MEMORYADDR0 ;for the Channel F multigame

0MEMORYADDR0 ;it will play in MESS

0MEMORYADDR0 ;it requires MG RAM at $2800 (could be rewritten to use regs only)

0MEMORYADDR0 

0MEMORYADDR0 ;instructions:

0MEMORYADDR0 ;make all lights green

0MEMORYADDR0 ;l/r/u/d moves cursor

0MEMORYADDR0 ;push down toggles lights

0MEMORYADDR0 ;pull up replays current pattern

0MEMORYADDR0 ;when complete, the count of moves is shown

0MEMORYADDR0 ;then up replays pattern, down goes to next random

0MEMORYADDR0 ;after all 64 patterns are played randomly, the complements (red<->green) are played

0MEMORYADDR0 

0MEMORYADDR0 ;game 1 is normal - all included patterns are solvable

0MEMORYADDR0 ;game 2 is on a torus (wrap-around) !!! not all included patterns are solvable on a torus

0MEMORYADDR0 ;game 3 is lit-only (only lit buttons can be pressed)

0MEMORYADDR0 

0MEMORYADDR0 ;mode 1 toggles self and u/d/l/r neighbors - + pattern

0MEMORYADDR0 ;mode 2 only toggles u/d/l/r neighbors !!! not all included patterns are solvable in this mode

0MEMORYADDR0 ;mode 3 toggles self and nw/ne/sw/se neighbors - X pattern

0MEMORYADDR0 ;mode 4 toggles nw/ne/sw/ne - X not self 

0MEMORYADDR0 

0MEMORYADDR0 ;todo:

0MEMORYADDR0 ;build game 2 or mode 2 patterns from random legal moves

0MEMORYADDR0 ;add random legal moves to patterns to create more

0MEMORYADDR0 ;rotate, invert patterns randomly for more variation

0MEMORYADDR0 ;three-state red, green, gray

0MEMORYADDR0 ;L modes

0MEMORYADDR0 ;more symbols-greek, smilies, arcade, 

0MEMORYADDR0 ;currently 12 bytes short of 2K, but there's lots more room

0MEMORYADDR0 

0MEMORYADDR0 ;egg - certain game/mode combo, solve certain pattern in minimum moves

0MEMORYADDR0 

0MEMORYADDR0 		processor f8

0MEMORYADDR0 

0MEMORYADDR0 ;BIOS calls

0MEMORYADDR0 clrscrn: equ $00d0							;uses r31

char '$'
stackarg 208 (@0)
0MEMORYADDR0 delay: equ $008f

char '$'
stackarg 143 (@0)
0MEMORYADDR0 pushk: equ $0107							;used to allow more subroutine stack space

char '$'
stackarg 263 (@0)
0MEMORYADDR0 popk: equ $011e

char '$'
stackarg 286 (@0)
0MEMORYADDR0 drawchar: equ $0679

char '$'
stackarg 1657 (@0)
0MEMORYADDR0 

0MEMORYADDR0 array: 			equ $2800					;use Schach RAM to hold current state of 25 lights

char '$'
stackarg 10240 (@0)
0MEMORYADDR0 history: 		equ $2900					;patterns we have already used, so we don't repeat

char '$'
stackarg 10496 (@0)
0MEMORYADDR0 temp4: 			equ $2a00					;temp storage of 4 bytes

char '$'
stackarg 10752 (@0)
0MEMORYADDR0 

0MEMORYADDR0 		org	$800,0

char '$'
stackarg 2048 (@0)
char ','
char '0'
stackarg 0 (@0)
0MEMORYADDR0 CartridgeStart: db		$55	                ; valid cart indicator

char '$'
stackarg 85 (@0)
0MEMORYADDR0                 NOP                      	; unused byte

0MEMORYADDR0 

0MEMORYADDR0 CartridgeEntry:

0MEMORYADDR0 				LIS		$0                  ; init the h/w

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 OUTS	1

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 OUTS	4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 OUTS	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 OUTS	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 lisu	4					;r32=complement flag

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 lisl	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lr		(IS),a

0MEMORYADDR0                 

0MEMORYADDR0 		        LI		$d6                 ; 

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A                ; clear screen to gray

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn             ; 

char 'c'
stackarg 208 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				li $11

char '$'
stackarg 17 (@0)
0MEMORYADDR0 				lisu 3						;init R30 game 1, mode 1

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 				li $4a						;display G? prompt

char '$'
stackarg 74 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				pi prompt

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				sl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisu 3						;r30 low nibble = game

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lr (IS),a					;game 1 - normal, game 2 - wraparound; game 3 - lit only

0MEMORYADDR0 				

0MEMORYADDR0 				pi prompts					;display S?/M? ; mode 1 normal, mode 2 no center toggle

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 						

0MEMORYADDR0 clrhist:									;clear history of patterns presented

0MEMORYADDR0 				dci history

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 				li $41						; # of patterns +1

char '$'
stackarg 65 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 clrhist2:

0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				st

0MEMORYADDR0 				ds 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 4,clrhist2

char '4'
stackarg 4 (@0)
char 'c'
stackarg 2089 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 nextpat:

0MEMORYADDR0 				lisu 2						;random #

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				as (IS)						;add to current pattern...

0MEMORYADDR0 				ni $3f						;...mod 64...

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr (IS),a					;...to get next pattern

0MEMORYADDR0 				

0MEMORYADDR0 				dci history					;check to see if we've already done this one

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lr q,dc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,unusedpat				;not yet used, display it

char '4'
stackarg 4 (@0)
char 'u'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;pattern already used, check for unused from top

0MEMORYADDR0 				;if not found, clear array and start over

0MEMORYADDR0 				

0MEMORYADDR0 				dci history

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 checknext:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,checknext				;will always complete because we zeroed 1 extra byte in clrhist

char '4'
stackarg 4 (@0)
char 'c'
stackarg 2116 (@0)
0MEMORYADDR0 				lr q,dc

0MEMORYADDR0 				lr a,ql

0MEMORYADDR0 				ai $ff						;lm moved us 1 past

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr ql,a

0MEMORYADDR0 				ci $40						;all done?

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				bf 4,foundone				

char '4'
stackarg 4 (@0)
char 'f'
stackarg 0 (@0)
0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lisu 4						; set flag to start complements (random/rotations later)

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,clrhist				;no empty slots, start over

char '0'
stackarg 0 (@0)
char 'c'
stackarg 2083 (@0)
0MEMORYADDR0 foundone:

redo 13: 'foundone' 0045 0004
0MEMORYADDR0 				lr (IS),a					;update the current pattern

0MEMORYADDR0 				

0MEMORYADDR0 unusedpat:		

redo 13: 'unusedpat' 0045 0004
0MEMORYADDR0 				lr dc,q						;mark it used

0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				st

0MEMORYADDR0 				

0MEMORYADDR0 replay:

0MEMORYADDR0 				lisu 3						;current pattern # in r29

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				dci pats

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				adc							; add cur pat to data pointer 5 times to get to the pat data

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				

0MEMORYADDR0 getpat:			lisu 2						;read bit pattern into regs 16-20

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 getpatloop:

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr (is)+,a

0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,getpatloop

char '4'
stackarg 4 (@0)
char 'g'
stackarg 2157 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci array					;put byte pattern into RAM

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 4						;first time through 0, next time FF

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				lr 3,a						;temp

char '3'
stackarg 3 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 storepatloop2:

0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr a,(is)+

0MEMORYADDR0 storepatloop:

0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				bf 1,onebit

char '1'
stackarg 1 (@0)
char 'o'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,storepat

char '0'
stackarg 0 (@0)
char 's'
stackarg 0 (@0)
0MEMORYADDR0 onebit:

redo 13: 'onebit' 0045 0004
0MEMORYADDR0 				com

0MEMORYADDR0 storepat:

redo 13: 'storepat' 0045 0004
0MEMORYADDR0 				st

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				sl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,storepatloop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2176 (@0)
0MEMORYADDR0 				ds 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				bf 4,storepatloop2

char '4'
stackarg 4 (@0)
char 's'
stackarg 2173 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lis 0						;init variables to 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lr (IS)+,a					;r24=row (3:0)

0MEMORYADDR0                 lr (IS)+,a					;r25=col (3:1)

0MEMORYADDR0                 lr (IS)+,a             		;r26=cursor (3:2)

0MEMORYADDR0                 lr (IS)+,a					;r27=array index (3:3)

0MEMORYADDR0                 lr (IS)+,a					;r28=parameter to toggle sub (3:4)

0MEMORYADDR0                 lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr (IS)+,a					;r22=press counter lo (2:6)

0MEMORYADDR0                 lr (IS)+,a					;r23=press counter hi (2:7)

0MEMORYADDR0 

0MEMORYADDR0 				dci grid					;draw the grid

char 'g'
stackarg 0 (@0)
0MEMORYADDR0 				pi	drawlines

char 'd'
stackarg 0 (@0)
0MEMORYADDR0 			

0MEMORYADDR0 ;draw lights

0MEMORYADDR0 				li 24						;array index

char '2'
stackarg 24 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 sqloop:

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bt 2,sqloop					;branch if >= 0

char '2'
stackarg 2 (@0)
char 's'
stackarg 2218 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				dci currows

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				lr	5,a						;upper row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				dci curcols

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				lr	4,a						;left col

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				dci	cursor					;start with the cursor in light 0

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				pi square

char 's'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 mainloop:

0MEMORYADDR0 				pi readhc

char 'r'
stackarg 0 (@0)
0MEMORYADDR0 				lr 0,a						;save controller input

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 2                		;inc random seed

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 ; redraw current square without cursor

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)+

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $0c

char '$'
stackarg 12 (@0)
0MEMORYADDR0 				bt 4,notupdn

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				ci $08

char '$'
stackarg 8 (@0)
0MEMORYADDR0 				bf 4,down

char '4'
stackarg 4 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 3						;up

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0						;r24 is row

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ds (IS)						;prev row

0MEMORYADDR0 				bf 2,minrow					;>=0?

char '2'
stackarg 2 (@0)
char 'm'
stackarg 0 (@0)
0MEMORYADDR0 updcurx:

0MEMORYADDR0 				jmp updcur

char 'u'
stackarg 0 (@0)
0MEMORYADDR0 minrow:

redo 13: 'minrow' 0045 0004
0MEMORYADDR0 				lis 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a	

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 down:

redo 13: 'down' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc							;next row

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				ci 5						;too far?

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,maxrow

char '4'
stackarg 4 (@0)
char 'm'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 maxrow:

redo 13: 'maxrow' 0045 0004
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 notupdn:

redo 13: 'notupdn' 0045 0004
0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $03

char '$'
stackarg 3 (@0)
0MEMORYADDR0 				bt 4,notlfrt

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				ci $02

char '$'
stackarg 2 (@0)
0MEMORYADDR0 				bf 4,right

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 3						;left

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1						;r25 is col

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ds (IS)						;prev col

0MEMORYADDR0 				bf 2,prevcol				;>=0?

char '2'
stackarg 2 (@0)
char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 prevcol:

redo 13: 'prevcol' 0045 0004
0MEMORYADDR0 				lis 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 right:

redo 13: 'right' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc							;next col

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				ci 5						;too far?

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bf 4,updcurx

char '4'
stackarg 4 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 notlfrt:

redo 13: 'notlfrt' 0045 0004
0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0 				bt 4,mainloop

char '4'
stackarg 4 (@0)
char 'm'
stackarg 2245 (@0)
0MEMORYADDR0 				ci $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				bt 4,pushdown

char '4'
stackarg 4 (@0)
char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				jmp replay					;pull up replays current pattern

char 'r'
stackarg 2142 (@0)
0MEMORYADDR0 

0MEMORYADDR0 pushdown:

redo 13: 'pushdown' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ni $f0

char '$'
stackarg 240 (@0)
0MEMORYADDR0 				ci $40						;if game=3, can only press lit buttons

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				bf 4,allowpress

char '4'
stackarg 4 (@0)
char 'a'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2						; get cursor loc

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,allowpress

char '4'
stackarg 4 (@0)
char 'a'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;make a bad sound

0MEMORYADDR0 				li		$3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr		1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 sndloop:

0MEMORYADDR0 				li		$80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lis		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr		5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi		delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				lis		0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf		4,sndloop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2366 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				jmp		updcur

char 'u'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 allowpress:

redo 13: 'allowpress' 0045 0004
0MEMORYADDR0 				lisu 2						;inc press counter

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 6		

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lis 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ai $66

char '$'
stackarg 102 (@0)
0MEMORYADDR0 				asd (IS)					;thanks Fredric!

0MEMORYADDR0 				lr (IS)+,a

0MEMORYADDR0 				bf 2,nocarry

char '2'
stackarg 2 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				lis 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ai $66

char '$'
stackarg 102 (@0)
0MEMORYADDR0 				asd (IS)

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 nocarry:

redo 13: 'nocarry' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6						;if mode=2 or 4, no center toggle

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f						;mode in low nibble

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 ci $2

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 bt 4,nocenter

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0                 ci $8

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 bt 4,nocenter

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2						; get cursor loc

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi toggle					;toggle center light

char 't'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 nocenter:

redo 13: 'nocenter' 0045 0004
0MEMORYADDR0 				dci plustable

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6						;if mode=3 or 4, X toggle

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f						;mode in low nibble

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 ci $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 bt 4,xtoggle				;mode 3, X toggle

char '4'
stackarg 4 (@0)
char 'x'
stackarg 0 (@0)
0MEMORYADDR0                 ci $8

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 bt 4,xtoggle				;mode 4, X toggle

char '4'
stackarg 4 (@0)
char 'x'
stackarg 0 (@0)
0MEMORYADDR0                 bf 0,dotoggle

char '0'
stackarg 0 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 xtoggle:

redo 13: 'xtoggle' 0045 0004
0MEMORYADDR0 				dci xtable

char 'x'
stackarg 0 (@0)
0MEMORYADDR0 dotoggle:

redo 13: 'dotoggle' 0045 0004
0MEMORYADDR0                 lisl 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lr a,(IS)					;get cursor loc

0MEMORYADDR0                 as (IS)

0MEMORYADDR0                 as (IS)

0MEMORYADDR0                 as (IS)						;*4 for table offset

0MEMORYADDR0                 adc

0MEMORYADDR0                 lm							;get 4 neighbors

0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4					;store them temporarily

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 st			;t4

0MEMORYADDR0                 lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 st			;t3

0MEMORYADDR0                 lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 st			;t2

0MEMORYADDR0                 lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 st			;t1

0MEMORYADDR0 

0MEMORYADDR0 				dci temp4                	;toggle each neighbor

char 't'
stackarg 10752 (@0)
0MEMORYADDR0 				li 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0                 pi togglem	;t1

char 't'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lm

0MEMORYADDR0                 pi togglem	;t2

char 't'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 pi togglem	;t3

char 't'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 pi togglem	;t4

char 't'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 updcur:

redo 13: 'updcur' 0045 0004
0MEMORYADDR0 				lisu 3						;calc index from row and col

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)						;row * 5

0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				as (IS)+					;add in col

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 				dci currows					;get row and column to draw cursor

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)+

0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci curcols

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci	cursor					;draw the cursor

char 'c'
stackarg 0 (@0)
0MEMORYADDR0 				pi square

char 's'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				LI $3F						;debounce by pausing a while

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				LR 5,A

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 pi delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;check for all green (win)

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				li 24						;array index

char '2'
stackarg 24 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 chkloop:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,lighton

char '4'
stackarg 4 (@0)
char 'l'
stackarg 0 (@0)
0MEMORYADDR0 				jmp mainloop				;not a win

char 'm'
stackarg 2245 (@0)
0MEMORYADDR0 lighton:

redo 13: 'lighton' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bt 2,chkloop

char '2'
stackarg 2 (@0)
char 'c'
stackarg 2538 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				;made it here, all off

0MEMORYADDR0 				;make a winning sound

0MEMORYADDR0 				li		$3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr		1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd2loop:

0MEMORYADDR0 				li		$40

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr		a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd2loopa:

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf		4,snd2loopa

char '4'
stackarg 4 (@0)
char 's'
stackarg 2561 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lis		0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf		4,snd2loop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2557 (@0)
0MEMORYADDR0 						

0MEMORYADDR0                 li 32				;draw 2 concentric squares

char '3'
stackarg 32 (@0)
0MEMORYADDR0                 lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 li 18

char '1'
stackarg 18 (@0)
0MEMORYADDR0                 lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 dci winsq1

char 'w'
stackarg 0 (@0)
0MEMORYADDR0                 pi square

char 's'
stackarg 0 (@0)
0MEMORYADDR0                 li 34

char '3'
stackarg 34 (@0)
0MEMORYADDR0                 lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 li 20

char '2'
stackarg 20 (@0)
0MEMORYADDR0                 lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 dci winsq2

char 'w'
stackarg 0 (@0)
0MEMORYADDR0                 pi square

char 's'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 ;print # of moves from r23/22 (2:7/6)

0MEMORYADDR0                 li $1e				;row

char '$'
stackarg 30 (@0)
0MEMORYADDR0                 lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisu 2				;1000s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 sr 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 bt 4,lt1000

char '4'
stackarg 4 (@0)
char 'l'
stackarg 0 (@0)
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 li $2a

char '$'
stackarg 42 (@0)
0MEMORYADDR0                 lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d100

char '0'
stackarg 0 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt1000:

redo 13: 'lt1000' 0045 0004
0MEMORYADDR0 				li $2c

char '$'
stackarg 44 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d100:				

redo 13: 'd100' 0045 0004
0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;100s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 bf 4,gt100

char '4'
stackarg 4 (@0)
char 'g'
stackarg 0 (@0)
0MEMORYADDR0                 lr a,(IS)			;print 0 if x0yz where x > 0

0MEMORYADDR0                 ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 bt 4,lt100

char '4'
stackarg 4 (@0)
char 'l'
stackarg 0 (@0)
0MEMORYADDR0                 lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 gt100:

redo 13: 'gt100' 0045 0004
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d10

char '0'
stackarg 0 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt100:

redo 13: 'lt100' 0045 0004
0MEMORYADDR0 				li $30

char '$'
stackarg 48 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d10:

redo 13: 'd10' 0045 0004
0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;10s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 sr 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 bf 4,gt10

char '4'
stackarg 4 (@0)
char 'g'
stackarg 0 (@0)
0MEMORYADDR0                 lisl 7				;print 0 if xy0z where x or y > 0

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 bt 4,lt10

char '4'
stackarg 4 (@0)
char 'l'
stackarg 0 (@0)
0MEMORYADDR0                 lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 gt10:

redo 13: 'gt10' 0045 0004
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d1

char '0'
stackarg 0 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt10:

redo 13: 'lt10' 0045 0004
0MEMORYADDR0 				li $34

char '$'
stackarg 52 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d1:

redo 13: 'd1' 0045 0004
0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;1s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 waitupdn:

0MEMORYADDR0                 pi readhc			;wait for hc up/down

char 'r'
stackarg 0 (@0)
0MEMORYADDR0                 ni $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0                 bt 4,waitupdn

char '4'
stackarg 4 (@0)
char 'w'
stackarg 2684 (@0)
0MEMORYADDR0                 ni $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0                 bt 4,redo

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0                 jmp nextpat			;down - get next random pattern

char 'n'
stackarg 2094 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 redo:

redo 13: 'redo' 0045 0004
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ci $41

char '$'
stackarg 65 (@0)
0MEMORYADDR0                 bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ci 51

char '5'
stackarg 51 (@0)
0MEMORYADDR0                 bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 				lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0 				lr a,(IS)-

0MEMORYADDR0 				ci 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ci $18

char '$'
stackarg 24 (@0)
0MEMORYADDR0 				bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 		        LI		$d6

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn

char 'c'
stackarg 208 (@0)
0MEMORYADDR0                 		              

0MEMORYADDR0                 dci blitparm

char 'b'
stackarg 0 (@0)
0MEMORYADDR0                 pi blit

char 'b'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 				li $3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd3loop:

0MEMORYADDR0 				li $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				li $1

char '$'
stackarg 1 (@0)
0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,snd3loop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2738 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				pi readhc

char 'r'
stackarg 0 (@0)
0MEMORYADDR0 		        LI		$d6

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn

char 'c'
stackarg 208 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				jmp nextpat			

char 'n'
stackarg 2094 (@0)
0MEMORYADDR0 replay2:

redo 13: 'replay2' 0045 0004
0MEMORYADDR0 				jmp replay			;up - replay current pattern

char 'r'
stackarg 2142 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 readhc:								;wait until one of the hand controllers is moved

redo 13: 'readhc' 0045 0004
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				ins 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				com					;un-invert port data

0MEMORYADDR0 				ni $cf				;mask off twists, since we don't use them

char '$'
stackarg 207 (@0)
0MEMORYADDR0 				bf 4,gothc

char '4'
stackarg 4 (@0)
char 'g'
stackarg 0 (@0)
0MEMORYADDR0 				outs 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ins 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				ni $cf

char '$'
stackarg 207 (@0)
0MEMORYADDR0 				bt 4,readhc

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2767 (@0)
0MEMORYADDR0 gothc:			pop

redo 13: 'gothc' 0045 0004
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 togglem:							;change a square (index in memory) from red to green or vice versa

redo 13: 'togglem' 0045 0004
0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $80				;if high bit set, then this was a wrap

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				bt 4,notwrapped

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6				;if game=$2x, allow wrap-around

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f0				;mode in low nibble

char '$'
stackarg 240 (@0)
0MEMORYADDR0                 ci $20

char '$'
stackarg 32 (@0)
0MEMORYADDR0 				bf 4,toggleexit2	;no wrap allowed

char '4'
stackarg 4 (@0)
char 't'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 notwrapped:

redo 13: 'notwrapped' 0045 0004
0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $7f				;strip off "wrapped" bit

char '$'
stackarg 127 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,toggle2

char '0'
stackarg 0 (@0)
char 't'
stackarg 0 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 toggle:								;change a square (index in r28) from red to green or vice versa

redo 13: 'toggle' 0045 0004
0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,(IS)		

0MEMORYADDR0 toggle2:

redo 13: 'toggle2' 0045 0004
0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				bt 4,notset

char '4'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,toggleexit

char '0'
stackarg 0 (@0)
char 't'
stackarg 0 (@0)
0MEMORYADDR0 notset:

redo 13: 'notset' 0045 0004
0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 

0MEMORYADDR0 toggleexit:

redo 13: 'toggleexit' 0045 0004
0MEMORYADDR0 				st

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,(IS)-

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 0 (@0)
0MEMORYADDR0 toggleexit2:

redo 13: 'toggleexit2' 0045 0004
0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 square:							;draw a square

redo 13: 'square' 0045 0004
0MEMORYADDR0 		; dci to color,width,height

0MEMORYADDR0 		;r5=upper row

0MEMORYADDR0 		;r4=left col

0MEMORYADDR0 		; uses r2,r3,r6

0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				outs	1		;set the color

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm				;

0MEMORYADDR0 				lr 5,a			;save the width

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 3,a			;store the height

char '3'
stackarg 3 (@0)
0MEMORYADDR0 

0MEMORYADDR0 squarev:

0MEMORYADDR0 				lr a,4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr 2,a			;save col

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,5			;get width

char '5'
stackarg 5 (@0)
0MEMORYADDR0 squareh:		lr 6,a			;save temp

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				outs	4		;set the col

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				inc				;next col

0MEMORYADDR0 				lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				pi plot

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 							

0MEMORYADDR0 				lr a,6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,squareh	;all done w/row

char '4'
stackarg 4 (@0)
char 's'
stackarg 2866 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				ins 5			;next row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ai $ff			;complement, so subtract 1

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,3			

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr 3,a

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				bf 4,squarev	;done full height?

char '4'
stackarg 4 (@0)
char 's'
stackarg 2863 (@0)
0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 				

0MEMORYADDR0 				

0MEMORYADDR0 drawlines:		; dci to table of 	color,len,row,start col (horiz if len<$80)

redo 13: 'drawlines' 0045 0004
0MEMORYADDR0 				;					color,len,col,start row (vert if len>$80)

0MEMORYADDR0 				;					repeat until $FF

0MEMORYADDR0 				;uses r5

0MEMORYADDR0 				lr	k,p

0MEMORYADDR0 line2:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ci $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,lineexit	;ff means done

char '4'
stackarg 4 (@0)
char 'l'
stackarg 0 (@0)
0MEMORYADDR0 				outs	1		;set the color

char '1'
stackarg 1 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lm				;get len

0MEMORYADDR0 				ni $ff			;lm doesn't set status flags

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 1,vline		;vertical lines are negative (and sign bit backwards)

char '1'
stackarg 1 (@0)
char 'v'
stackarg 0 (@0)
0MEMORYADDR0 				lr 5,a			;horiz-save len

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm				;get starting column

0MEMORYADDR0 hline2:

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 4			;set the column

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				pi plot

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				ds 5								

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,line2

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2896 (@0)
0MEMORYADDR0 				ins 4			; 

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf  0,hline2

char '0'
stackarg 0 (@0)
char 'h'
stackarg 2912 (@0)
0MEMORYADDR0 lineexit:

redo 13: 'lineexit' 0045 0004
0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 vline:

redo 13: 'vline' 0045 0004
0MEMORYADDR0 				ni $3f			;mask off sign bit, limit len to 63 (height of screen)

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr 5,a			;save it

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 4			;set the column

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lm				;get starting row

0MEMORYADDR0 vline2:

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi plot		

char 'p'
stackarg 0 (@0)
0MEMORYADDR0 				ds 5								

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,line2

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2896 (@0)
0MEMORYADDR0 				ins 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf  0,vline2

char '0'
stackarg 0 (@0)
char 'v'
stackarg 2933 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				

0MEMORYADDR0 plot:							;this is what you have to do to transfer data to the screen memory

redo 13: 'plot' 0045 0004
0MEMORYADDR0 								;after setting row, column and color

0MEMORYADDR0 				li	$60

char '$'
stackarg 96 (@0)
0MEMORYADDR0 				outs	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				li	$50

char '$'
stackarg 80 (@0)
0MEMORYADDR0 				outs	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis	6	; little delay

char '6'
stackarg 6 (@0)
0MEMORYADDR0 pdelay:			ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf	4,pdelay

char '4'
stackarg 4 (@0)
char 'p'
stackarg 2953 (@0)
0MEMORYADDR0 				pop

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 drawlight:						;draws a red or green square based off value passed in r27

redo 13: 'drawlight' 0045 0004
0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci sqrows

char 's'
stackarg 0 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm		

0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci sqcols

char 's'
stackarg 0 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,(IS)					; read color from array

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,dogreen

char '4'
stackarg 4 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 				dci redsq

char 'r'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,dosq

char '0'
stackarg 0 (@0)
char 'd'
stackarg 0 (@0)
0MEMORYADDR0 dogreen:

redo 13: 'dogreen' 0045 0004
0MEMORYADDR0 				dci greensq

char 'g'
stackarg 0 (@0)
0MEMORYADDR0 dosq:

redo 13: 'dosq' 0045 0004
0MEMORYADDR0 				pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 ;blit code from cart 26

0MEMORYADDR0 blit:

redo 13: 'blit' 0045 0004
0MEMORYADDR0          		LR      K,P 

0MEMORYADDR0          		pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0          		LISU    0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 blitloop:

0MEMORYADDR0 				LISL    4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 getparms:

0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      (IS)-,A

0MEMORYADDR0 				BR7     getparms

char 'g'
stackarg 3009 (@0)
0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      H,DC

0MEMORYADDR0 				DCI     blitparm

char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				ADC         

0MEMORYADDR0 				

0MEMORYADDR0 				LIS     1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				LR      $7,A

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				INS     5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 				NI      $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0 				AS      $1

char '$'
stackarg 1 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2z:

0MEMORYADDR0 				OUTS    5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				DS      $3

char '$'
stackarg 3 (@0)
0MEMORYADDR0 				BF      2,blitexit

char '2'
stackarg 2 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				LR      A,$2

char '$'
stackarg 2 (@0)
0MEMORYADDR0 				LR      $5,A

char '$'
stackarg 5 (@0)
0MEMORYADDR0 				LR      A,$0

char '$'
stackarg 0 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2a:

0MEMORYADDR0 				OUTS    4  

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				DS      $7

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				BF      4,blit2c

char '4'
stackarg 4 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				LIS     8

char '8'
stackarg 8 (@0)
0MEMORYADDR0 				LR      $7,A

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      $6,A

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LIS     1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				NS      $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      4,blit2b

char '4'
stackarg 4 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				LIS     0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2b:

redo 13: 'blit2b' 0045 0004
0MEMORYADDR0 				ADC         

0MEMORYADDR0 blit2c:

redo 13: 'blit2c' 0045 0004
0MEMORYADDR0 				LR      A,$6

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				AS      $6

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LR      $6,A

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LR      A,$4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      2,blit2d

char '2'
stackarg 2 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				LIS     0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 blit2d:

redo 13: 'blit2d' 0045 0004
0MEMORYADDR0 				COM         

0MEMORYADDR0 				OUTS    1  

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				LIS     6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				SL      4   

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				OUTS    0  

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				SL      1   

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				OUTS    0  

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				BF      0,blit2e

char '0'
stackarg 0 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 blit2e:

redo 13: 'blit2e' 0045 0004
0MEMORYADDR0 				AI      $60

char '$'
stackarg 96 (@0)
0MEMORYADDR0 				BF      4,blit2e

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3066 (@0)
0MEMORYADDR0 				DS      $5

char '$'
stackarg 5 (@0)
0MEMORYADDR0 				BT      4,blit2f

char '4'
stackarg 4 (@0)
char 'b'
stackarg 0 (@0)
0MEMORYADDR0 				INS     4  

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				AI      $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				BF      0,blit2a

char '0'
stackarg 0 (@0)
char 'b'
stackarg 3035 (@0)
0MEMORYADDR0 blit2f:

redo 13: 'blit2f' 0045 0004
0MEMORYADDR0 				INS     5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				AI      $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				BF      0,blit2z

char '0'
stackarg 0 (@0)
char 'b'
stackarg 3027 (@0)
0MEMORYADDR0 blitexit:

redo 13: 'blitexit' 0045 0004
0MEMORYADDR0 

0MEMORYADDR0 				LR      DC,H

0MEMORYADDR0 				LIS     2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				NS      $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      4,blitloop

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3008 (@0)
0MEMORYADDR0 				pi 		popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				PK          

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 ;from the BIOS, but I removed T? (time) prompt

0MEMORYADDR0 prompts:        LR   K,P                 ; 

redo 13: 'prompts' 0045 0004
0MEMORYADDR0                 PI   pushk               ; 

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 prompts2:       LI   $85                 ; red 5 (S)

char '$'
stackarg 133 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   prompt              ; 

char 'p'
stackarg 0 (@0)
0MEMORYADDR0                 LR   A,$4                ; 

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 CI   $08                 ; is it button 4, Start?

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 BF   $4,notbut4          ; no, check others

char '$'
stackarg 4 (@0)
char 'n'
stackarg 0 (@0)
0MEMORYADDR0 notbut2:

0MEMORYADDR0                 PI   popk                ; yes, return

char 'p'
stackarg 286 (@0)
0MEMORYADDR0                 PK                       ; 

0MEMORYADDR0                 

0MEMORYADDR0 notbut4:        CI   $02                 ; is it button 2, Mode?

redo 13: 'notbut4' 0045 0004
char '$'
stackarg 2 (@0)
0MEMORYADDR0                 BF   $4,notbut2          ; 

char '$'
stackarg 4 (@0)
char 'n'
stackarg 3107 (@0)
0MEMORYADDR0                 LI   $8e                 ; red M

char '$'
stackarg 142 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   prompt              ; 

char 'p'
stackarg 0 (@0)
0MEMORYADDR0                 LISU 3                   ; 

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 LISL 6                   ; 

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 LR   A,(IS)                ; 

0MEMORYADDR0                 as	4					;add the mode to the game #

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 LR   (IS),A              ; 

0MEMORYADDR0                 BF   $0,prompts2         ; 

char '$'
stackarg 0 (@0)
char 'p'
stackarg 3096 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 

0MEMORYADDR0 ;from the BIOS, but I added random # seed to readbuts

0MEMORYADDR0 prompt:         LR   K,P                 ; $0099 - prints char r0 at row r1, col r2, waits for button

redo 13: 'prompt' 0045 0004
0MEMORYADDR0                 PI   pushk               ; 

char 'p'
stackarg 263 (@0)
0MEMORYADDR0                 LI   $33                 ; r1=$33

char '$'
stackarg 51 (@0)
0MEMORYADDR0                 LR   $1,A                ; 

char '$'
stackarg 1 (@0)
0MEMORYADDR0                 LI   $13                 ; r2=$13

char '$'
stackarg 19 (@0)
0MEMORYADDR0                 LR   $2,A                ; 

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 LI   $8b                 ; r0=8b	red ?

char '$'
stackarg 139 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 PI   readbuts            ; 

char 'r'
stackarg 0 (@0)
0MEMORYADDR0                 LI   $33                 ; r1=$33

char '$'
stackarg 51 (@0)
0MEMORYADDR0                 LR   $1,A                ; 

char '$'
stackarg 1 (@0)
0MEMORYADDR0                 LI   $13                 ; r2=$13

char '$'
stackarg 19 (@0)
0MEMORYADDR0                 LR   $2,A                ; 

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 LIS  $d                  ; r0=$d

char '$'
stackarg 13 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 PI   popk                ; 

char 'p'
stackarg 286 (@0)
0MEMORYADDR0                 PK                       ; 

0MEMORYADDR0                 

0MEMORYADDR0 readbuts:

redo 13: 'readbuts' 0045 0004
0MEMORYADDR0 				lisu 2                	;inc random seed

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				

0MEMORYADDR0 		        INS  0                   ; $00c1 - read buttons

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 COM                      ; 

0MEMORYADDR0                 NI   $0f                 ; 

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 BT   4,readbuts          ; 

char '4'
stackarg 4 (@0)
char 'r'
stackarg 3168 (@0)
0MEMORYADDR0                 LR   $4,A                ; 

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 LI   $ff                 ; 

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 LR   $5,A                ; 

char '$'
stackarg 5 (@0)
0MEMORYADDR0 dbounce:        DS   $5                  ; 

char '$'
stackarg 5 (@0)
0MEMORYADDR0                 BF   $4,dbounce         ; 

char '$'
stackarg 4 (@0)
char 'd'
stackarg 3183 (@0)
0MEMORYADDR0                 jmp delay            ; 

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 ;colors: $40-red, $80=blue, $0=green, $c0=bkg

0MEMORYADDR0 

0MEMORYADDR0 ;data to draw lines for grid

0MEMORYADDR0 grid:				;horiz-color,len,row,start col

redo 13: 'grid' 0045 0004
0MEMORYADDR0 				db $80,66,7,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '7'
stackarg 7 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,17,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '1'
stackarg 17 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,27,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '2'
stackarg 27 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,37,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '3'
stackarg 37 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,47,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '4'
stackarg 47 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,57,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '5'
stackarg 57 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 					;vert-color,$80+len,col,start row

0MEMORYADDR0 				db $80,179,18,7	;179=128+51

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,31,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '3'
stackarg 31 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,44,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '4'
stackarg 44 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,57,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '5'
stackarg 57 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,70,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '7'
stackarg 70 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,83,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '8'
stackarg 83 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;data to draw squares

0MEMORYADDR0 redsq:				;color,width,height

redo 13: 'redsq' 0045 0004
0MEMORYADDR0 				db $40,12,9

char '$'
stackarg 64 (@0)
char ','
char '1'
stackarg 12 (@0)
char ','
char '9'
stackarg 9 (@0)
0MEMORYADDR0 greensq:			;color,width,height

redo 13: 'greensq' 0045 0004
0MEMORYADDR0 				db $0,12,9

char '$'
stackarg 0 (@0)
char ','
char '1'
stackarg 12 (@0)
char ','
char '9'
stackarg 9 (@0)
0MEMORYADDR0 cursor:				;color,width,height

redo 13: 'cursor' 0045 0004
0MEMORYADDR0 				db $c0,4,3

char '$'
stackarg 192 (@0)
char ','
char '4'
stackarg 4 (@0)
char ','
char '3'
stackarg 3 (@0)
0MEMORYADDR0 winsq1:

redo 13: 'winsq1' 0045 0004
0MEMORYADDR0 				db $40,38,29	;red

char '$'
stackarg 64 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '2'
stackarg 29 (@0)
0MEMORYADDR0 winsq2:

redo 13: 'winsq2' 0045 0004
0MEMORYADDR0 				db $c0,34,25	;bkg

char '$'
stackarg 192 (@0)
char ','
char '3'
stackarg 34 (@0)
char ','
char '2'
stackarg 25 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;locations to draw each light, based on index (0-24)

0MEMORYADDR0 sqrows:			

redo 13: 'sqrows' 0045 0004
0MEMORYADDR0 				db   8, 8, 8, 8, 8,18,18,18,18,18,28,28,28,28,28,38,38,38,38,38,48,48,48,48,48

char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
0MEMORYADDR0 sqcols:			

redo 13: 'sqcols' 0045 0004
0MEMORYADDR0 				db  19,32,45,58,71,19,32,45,58,71,19,32,45,58,71,19,32,45,58,71,19,32,45,58,71

char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 ;locations to draw cursor, based on row/column

0MEMORYADDR0 currows:

redo 13: 'currows' 0045 0004
0MEMORYADDR0 				db	11,21,31,41,51

char '1'
stackarg 11 (@0)
char ','
char '2'
stackarg 21 (@0)
char ','
char '3'
stackarg 31 (@0)
char ','
char '4'
stackarg 41 (@0)
char ','
char '5'
stackarg 51 (@0)
0MEMORYADDR0 curcols:

redo 13: 'curcols' 0045 0004
0MEMORYADDR0 				db	23,36,49,62,75

char '2'
stackarg 23 (@0)
char ','
char '3'
stackarg 36 (@0)
char ','
char '4'
stackarg 49 (@0)
char ','
char '6'
stackarg 62 (@0)
char ','
char '7'
stackarg 75 (@0)
0MEMORYADDR0 

0MEMORYADDR0 plustable:		;squares to toggle based on cursor N E W S +128 means wrapped

redo 13: 'plustable' 0045 0004
0MEMORYADDR0 				db 148,  1,132,  5

char '1'
stackarg 148 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
0MEMORYADDR0 				db 149,  2,  0,  6

char '1'
stackarg 149 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '0'
stackarg 0 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
0MEMORYADDR0 				db 150,  3,  1,  7

char '1'
stackarg 150 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db 151,  4,  2,  8  

char '1'
stackarg 151 (@0)
char ','
char ' '
char '4'
stackarg 4 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
0MEMORYADDR0 				db 152,128,  3,  9

char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db   0,  6,137, 10

char '0'
stackarg 0 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char '1'
stackarg 137 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
0MEMORYADDR0 				db   1,  7,  5, 11

char '1'
stackarg 1 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
0MEMORYADDR0 				db   2,  8,  6, 12

char '2'
stackarg 2 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
0MEMORYADDR0 				db   3,  9,  7, 13

char '3'
stackarg 3 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
0MEMORYADDR0 				db   4,133,  8, 14

char '4'
stackarg 4 (@0)
char ','
char '1'
stackarg 133 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db   5, 11,142, 15

char '5'
stackarg 5 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
0MEMORYADDR0 				db   6, 12, 10, 16

char '6'
stackarg 6 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
0MEMORYADDR0 				db   7, 13, 11, 17

char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
0MEMORYADDR0 				db   8, 14, 12, 18

char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db   9,138, 13, 19

char '9'
stackarg 9 (@0)
char ','
char '1'
stackarg 138 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db  10, 16,147, 20

char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char '1'
stackarg 147 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
0MEMORYADDR0 				db  11, 17, 15, 21

char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
0MEMORYADDR0 				db  12, 18, 16, 22

char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
0MEMORYADDR0 				db  13, 19, 17, 23

char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
0MEMORYADDR0 				db  14,143, 18, 24

char '1'
stackarg 14 (@0)
char ','
char '1'
stackarg 143 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db  15, 21,152,128

char '1'
stackarg 15 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 128 (@0)
0MEMORYADDR0 				db  16, 22, 20,129

char '1'
stackarg 16 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
char ','
char '1'
stackarg 129 (@0)
0MEMORYADDR0 				db  17, 23, 21,130

char '1'
stackarg 17 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char '1'
stackarg 130 (@0)
0MEMORYADDR0 				db  18, 24, 22,131

char '1'
stackarg 18 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char '1'
stackarg 131 (@0)
0MEMORYADDR0 				db  19,148, 23,132

char '1'
stackarg 19 (@0)
char ','
char '1'
stackarg 148 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char '1'
stackarg 132 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 xtable:		;squares to toggle based on cursor NW NE SW SE +128 means wrapped

redo 13: 'xtable' 0045 0004
0MEMORYADDR0 				db 152,149,137,  6

char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 149 (@0)
char ','
char '1'
stackarg 137 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
0MEMORYADDR0 				db 148,150,  5,  7

char '1'
stackarg 148 (@0)
char ','
char '1'
stackarg 150 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db 149,151,  6,  8

char '1'
stackarg 149 (@0)
char ','
char '1'
stackarg 151 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
0MEMORYADDR0 				db 150,152,  7,  9

char '1'
stackarg 150 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
0MEMORYADDR0 				db 151,148,  8,133

char '1'
stackarg 151 (@0)
char ','
char '1'
stackarg 148 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 133 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 132,  1,142, 11

char '1'
stackarg 132 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
0MEMORYADDR0 				db   0,  2, 10, 12

char '0'
stackarg 0 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
0MEMORYADDR0 				db   1,  3, 11, 13

char '1'
stackarg 1 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
0MEMORYADDR0 				db   2,  4, 12, 14

char '2'
stackarg 2 (@0)
char ','
char ' '
char '4'
stackarg 4 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
0MEMORYADDR0 				db   3,128, 13,138

char '3'
stackarg 3 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char '1'
stackarg 138 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 137,  6,147, 16

char '1'
stackarg 137 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char '1'
stackarg 147 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
0MEMORYADDR0 				db   5,  7, 15, 17

char '5'
stackarg 5 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
0MEMORYADDR0 				db   6,  8, 16, 18

char '6'
stackarg 6 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db   7,  9, 17, 19

char '7'
stackarg 7 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
0MEMORYADDR0 				db   8,133, 18,143

char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 133 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 143 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 142, 11,152, 21

char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
0MEMORYADDR0 				db  10, 12, 20, 22

char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
0MEMORYADDR0 				db  11, 13, 21, 23

char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
0MEMORYADDR0 				db  12, 14, 22, 24

char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
0MEMORYADDR0 				db  13,138, 23,148

char '1'
stackarg 13 (@0)
char ','
char '1'
stackarg 138 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char '1'
stackarg 148 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 147, 16,132,129

char '1'
stackarg 147 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char '1'
stackarg 129 (@0)
0MEMORYADDR0 				db  15, 17,128,130

char '1'
stackarg 15 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char '1'
stackarg 130 (@0)
0MEMORYADDR0 				db  16, 18,129,131

char '1'
stackarg 16 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 129 (@0)
char ','
char '1'
stackarg 131 (@0)
0MEMORYADDR0 				db  17, 19,130,132

char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
char ','
char '1'
stackarg 130 (@0)
char ','
char '1'
stackarg 132 (@0)
0MEMORYADDR0 				db  18,143,132,128 

char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 143 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char '1'
stackarg 128 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;the patterns - 1 bit is red, 0 is green

0MEMORYADDR0 ;other code has to be adjusted to use more or less than 64 patterns

0MEMORYADDR0 ;not all of these are solvable on a torus or if only the neighbors toggle

0MEMORYADDR0 pats:

redo 13: 'pats' 0045 0004
0MEMORYADDR0 ;				db 		$00,$00,$00,$80,$c0		; easy one for test

0MEMORYADDR0 

0MEMORYADDR0                 db      $20,$50,$88,$F8,$88

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $F0,$88,$88,$88,$F0

char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0                 db      $F8,$80,$F8,$80,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $F8,$80,$F0,$80,$80

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0                 db      $88,$88,$F8,$88,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $F8,$20,$20,$20,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $90,$A0,$C0,$A0,$90

char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 144 (@0)
0MEMORYADDR0                 db      $80,$80,$80,$80,$F8

char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $88,$D8,$A8,$88,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$C8,$A8,$98,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 152 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $70,$88,$88,$88,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $70,$88,$A8,$90,$68

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 104 (@0)
0MEMORYADDR0                 db      $70,$80,$70,$08,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$20,$20,$20,$20

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $88,$88,$A8,$D8,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$50,$20,$50,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$50,$20,$20,$20

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $F8,$10,$20,$40,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $50,$50,$00,$70,$20

char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $20,$70,$F8,$70,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $D8,$20,$20,$20,$D8

char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 216 (@0)
0MEMORYADDR0                 db      $00,$00,$20,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $00,$20,$50,$20,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$00,$88,$00,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $50,$A8,$50,$A8,$50

char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
0MEMORYADDR0                 db      $A8,$70,$F8,$70,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $00,$D8,$50,$D8,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$88,$20,$88,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $F8,$A8,$88,$A8,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $20,$60,$20,$20,$70

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 96 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $70,$08,$70,$80,$F8

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $70,$08,$70,$08,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$00,$70,$00,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $70,$88,$70,$88,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$88,$50,$70,$00

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $F8,$70,$20,$00,$00

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$20,$F8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $A8,$88,$F8,$88,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $C0,$A0,$A8,$28,$18

char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $18,$08,$20,$80,$C0

char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 192 (@0)
0MEMORYADDR0                 db      $D8,$88,$50,$88,$D8

char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 216 (@0)
0MEMORYADDR0                 db      $18,$C0,$18,$C0,$18

char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $A8,$A8,$A8,$A8,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $00,$F8,$00,$F8,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $10,$78,$50,$F0,$40

char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 64 (@0)
0MEMORYADDR0                 db      $C0,$E0,$70,$38,$18

char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $60,$90,$70,$48,$30

char '$'
stackarg 96 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 48 (@0)
0MEMORYADDR0                 db      $A8,$A8,$50,$A8,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $98,$F0,$50,$78,$C8

char '$'
stackarg 152 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 200 (@0)
0MEMORYADDR0                 db      $70,$A8,$F8,$F8,$A8

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $A0,$E0,$B8,$10,$38

char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 184 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 56 (@0)
0MEMORYADDR0                 db      $00,$00,$F8,$50,$50	; pi pattern

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 80 (@0)
0MEMORYADDR0                 db      $00,$40,$00,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $00,$50,$00,$50,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $10,$48,$20,$90,$40

char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 64 (@0)
0MEMORYADDR0                 db      $78,$E8,$F8,$B8,$F0

char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 232 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 184 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0                 db      $E0,$90,$E0,$90,$E0

char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
0MEMORYADDR0                 db      $30,$48,$C0,$48,$30

char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 48 (@0)
0MEMORYADDR0                 db      $38,$48,$20,$90,$E0

char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
0MEMORYADDR0                 db      $00,$38,$00,$E0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$20,$D8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $20,$70,$A8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $C8,$D0,$20,$58,$98

char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 208 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 88 (@0)
char ','
char '$'
stackarg 152 (@0)
0MEMORYADDR0                 db      $00,$70,$50,$70,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 ;8 bytes available here

0MEMORYADDR0 

0MEMORYADDR0 		org	$f00

char '$'
stackarg 3840 (@0)
0MEMORYADDR0 blitparm:				

redo 13: 'blitparm' 0045 0004
0MEMORYADDR0 		db	$82,19,96,$16,$8,$08,00,00

char '$'
stackarg 130 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '9'
stackarg 96 (@0)
char ','
char '$'
stackarg 22 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '0'
stackarg 0 (@0)
char ','
char '0'
stackarg 0 (@0)
0MEMORYADDR0 blitdata:

0MEMORYADDR0 		db	$00,$45,$F0,$41,$E1,$01,$F7,$80,$44,$20,$40,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 225 (@0)
char ','
char '$'
stackarg 1 (@0)
char ','
char '$'
stackarg 247 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$00,$41,$13,$81,$04,$40,$A4,$20,$A0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 19 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 164 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$7D,$E0,$41,$E4,$41,$E7,$81,$14,$21,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 125 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 231 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 20 (@0)
char ','
char '$'
stackarg 33 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$04,$41,$07,$C1,$04,$41,$F4,$21,$F0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 7 (@0)
char ','
char '$'
stackarg 193 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 33 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$f3,$81,$04,$41,$F4,$41,$17,$BD,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 243 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 189 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$F8,$8E,$F1,$C8,$BA,$1E,$04,$50,$72,$22,$3C,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 142 (@0)
char ','
char '$'
stackarg 241 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 186 (@0)
char ','
char '$'
stackarg 30 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 114 (@0)
char ','
char '$'
stackarg 34 (@0)
char ','
char '$'
stackarg 60 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0 		db	$81,$44,$8A,$28,$92,$11,$03,$90,$82,$45,$22,$80

char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 138 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 3 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 130 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 34 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0 		db	$F2,$24,$F2,$0F,$92,$11,$74,$50,$73,$88,$BC,$F0

char '$'
stackarg 242 (@0)
char ','
char '$'
stackarg 36 (@0)
char ','
char '$'
stackarg 242 (@0)
char ','
char '$'
stackarg 15 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 116 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 115 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 188 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0 		db	$83,$E4,$8A,$28,$92,$11,$07,$D0,$0A,$4F,$A2,$80

char '$'
stackarg 131 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 138 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 7 (@0)
char ','
char '$'
stackarg 208 (@0)
char ','
char '$'
stackarg 10 (@0)
char ','
char '$'
stackarg 79 (@0)
char ','
char '$'
stackarg 162 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0 		db	$82,$2E,$89,$C8,$BB,$DE,$04,$5E,$72,$28,$A2,$F8

char '$'
stackarg 130 (@0)
char ','
char '$'
stackarg 46 (@0)
char ','
char '$'
stackarg 137 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 187 (@0)
char ','
char '$'
stackarg 222 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 94 (@0)
char ','
char '$'
stackarg 114 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 162 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$79,$17,$81,$17,$DF,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 121 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 223 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$44,$E4,$41,$11,$10,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$45,$17,$81,$11,$1E,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 30 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$45,$F4,$41,$11,$10,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$79,$14,$40,$E1,$1F,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 121 (@0)
char ','
char '$'
stackarg 20 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 225 (@0)
char ','
char '$'
stackarg 31 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;4 bytes available here

0MEMORYADDR0 

0MEMORYADDR0 		org	$ff0

char '$'
stackarg 4080 (@0)
0MEMORYADDR0 		db	$53,$65,$61,$6e,$20,$52,$69,$64,$64,$6c,$65,$20,$32,$30,$30,$34

char '$'
stackarg 83 (@0)
char ','
char '$'
stackarg 101 (@0)
char ','
char '$'
stackarg 97 (@0)
char ','
char '$'
stackarg 110 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 82 (@0)
char ','
char '$'
stackarg 105 (@0)
char ','
char '$'
stackarg 100 (@0)
char ','
char '$'
stackarg 100 (@0)
char ','
char '$'
stackarg 108 (@0)
char ','
char '$'
stackarg 101 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 50 (@0)
char ','
char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 52 (@0)
0MEMORYADDR0 ; Sean Riddle's lights.asm, the first reallife program ever assembled

0MEMORYADDR0 ; by dasm2. The usual modifications to f8tool source were needed:

0MEMORYADDR0 ; - Needed to add the processor directive at the top of the source.

0MEMORYADDR0 ; - Needed to indent the org directives because dasm2 would parse

0MEMORYADDR0 ;   them as labels.

0MEMORYADDR0 ; - The first org directive sets the org fill value to 0, since this

0MEMORYADDR0 ;   is what f8tool uses and the reference binary was assembled with

0MEMORYADDR0 ;   f8tool.

0MEMORYADDR0 ;

0MEMORYADDR0 ;lights out

0MEMORYADDR0 ;by Sean Riddle

0MEMORYADDR0 ;6/2004

0MEMORYADDR0 ;members.cox.net/seanriddle

0MEMORYADDR0 ;

0MEMORYADDR0 ; Copyright (C) 2004 Sean Riddle (members.cox.net/seanriddle)

0MEMORYADDR0 ;

0MEMORYADDR0 ; lights is free software; you can redistribute it and/or modify

0MEMORYADDR0 ; it under the terms of the GNU General Public License as published by

0MEMORYADDR0 ; the Free Software Foundation; either version 2 of the License, or

0MEMORYADDR0 ; (at your option) any later version.

0MEMORYADDR0 ;

0MEMORYADDR0 ; lights is distributed in the hope that it will be useful,

0MEMORYADDR0 ; but WITHOUT ANY WARRANTY; without even the implied warranty of

0MEMORYADDR0 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

0MEMORYADDR0 ; GNU General Public License for more details.

0MEMORYADDR0 ;

0MEMORYADDR0 ; You should have received a copy of the GNU General Public License

0MEMORYADDR0 ; along with lights; if not, write to the Free Software

0MEMORYADDR0 ; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

0MEMORYADDR0 

0MEMORYADDR0 ;for the Channel F multigame

0MEMORYADDR0 ;it will play in MESS

0MEMORYADDR0 ;it requires MG RAM at $2800 (could be rewritten to use regs only)

0MEMORYADDR0 

0MEMORYADDR0 ;instructions:

0MEMORYADDR0 ;make all lights green

0MEMORYADDR0 ;l/r/u/d moves cursor

0MEMORYADDR0 ;push down toggles lights

0MEMORYADDR0 ;pull up replays current pattern

0MEMORYADDR0 ;when complete, the count of moves is shown

0MEMORYADDR0 ;then up replays pattern, down goes to next random

0MEMORYADDR0 ;after all 64 patterns are played randomly, the complements (red<->green) are played

0MEMORYADDR0 

0MEMORYADDR0 ;game 1 is normal - all included patterns are solvable

0MEMORYADDR0 ;game 2 is on a torus (wrap-around) !!! not all included patterns are solvable on a torus

0MEMORYADDR0 ;game 3 is lit-only (only lit buttons can be pressed)

0MEMORYADDR0 

0MEMORYADDR0 ;mode 1 toggles self and u/d/l/r neighbors - + pattern

0MEMORYADDR0 ;mode 2 only toggles u/d/l/r neighbors !!! not all included patterns are solvable in this mode

0MEMORYADDR0 ;mode 3 toggles self and nw/ne/sw/se neighbors - X pattern

0MEMORYADDR0 ;mode 4 toggles nw/ne/sw/ne - X not self 

0MEMORYADDR0 

0MEMORYADDR0 ;todo:

0MEMORYADDR0 ;build game 2 or mode 2 patterns from random legal moves

0MEMORYADDR0 ;add random legal moves to patterns to create more

0MEMORYADDR0 ;rotate, invert patterns randomly for more variation

0MEMORYADDR0 ;three-state red, green, gray

0MEMORYADDR0 ;L modes

0MEMORYADDR0 ;more symbols-greek, smilies, arcade, 

0MEMORYADDR0 ;currently 12 bytes short of 2K, but there's lots more room

0MEMORYADDR0 

0MEMORYADDR0 ;egg - certain game/mode combo, solve certain pattern in minimum moves

0MEMORYADDR0 

0MEMORYADDR0 		processor f8

0MEMORYADDR0 

0MEMORYADDR0 ;BIOS calls

0MEMORYADDR0 clrscrn: equ $00d0							;uses r31

char '$'
stackarg 208 (@0)
0MEMORYADDR0 delay: equ $008f

char '$'
stackarg 143 (@0)
0MEMORYADDR0 pushk: equ $0107							;used to allow more subroutine stack space

char '$'
stackarg 263 (@0)
0MEMORYADDR0 popk: equ $011e

char '$'
stackarg 286 (@0)
0MEMORYADDR0 drawchar: equ $0679

char '$'
stackarg 1657 (@0)
0MEMORYADDR0 

0MEMORYADDR0 array: 			equ $2800					;use Schach RAM to hold current state of 25 lights

char '$'
stackarg 10240 (@0)
0MEMORYADDR0 history: 		equ $2900					;patterns we have already used, so we don't repeat

char '$'
stackarg 10496 (@0)
0MEMORYADDR0 temp4: 			equ $2a00					;temp storage of 4 bytes

char '$'
stackarg 10752 (@0)
0MEMORYADDR0 

0MEMORYADDR0 		org	$800,0

char '$'
stackarg 2048 (@0)
char ','
char '0'
stackarg 0 (@0)
0MEMORYADDR0 CartridgeStart: db		$55	                ; valid cart indicator

char '$'
stackarg 85 (@0)
0MEMORYADDR0                 NOP                      	; unused byte

0MEMORYADDR0 

0MEMORYADDR0 CartridgeEntry:

0MEMORYADDR0 				LIS		$0                  ; init the h/w

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 OUTS	1

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 OUTS	4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 OUTS	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 OUTS	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 lisu	4					;r32=complement flag

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 lisl	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lr		(IS),a

0MEMORYADDR0                 

0MEMORYADDR0 		        LI		$d6                 ; 

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A                ; clear screen to gray

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn             ; 

char 'c'
stackarg 208 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				li $11

char '$'
stackarg 17 (@0)
0MEMORYADDR0 				lisu 3						;init R30 game 1, mode 1

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 				li $4a						;display G? prompt

char '$'
stackarg 74 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				pi prompt

char 'p'
stackarg 3128 (@0)
0MEMORYADDR0 				lr a,4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				sl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisu 3						;r30 low nibble = game

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lr (IS),a					;game 1 - normal, game 2 - wraparound; game 3 - lit only

0MEMORYADDR0 				

0MEMORYADDR0 				pi prompts					;display S?/M? ; mode 1 normal, mode 2 no center toggle

char 'p'
stackarg 3092 (@0)
0MEMORYADDR0 						

0MEMORYADDR0 clrhist:									;clear history of patterns presented

0MEMORYADDR0 				dci history

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 				li $41						; # of patterns +1

char '$'
stackarg 65 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 clrhist2:

0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				st

0MEMORYADDR0 				ds 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 4,clrhist2

char '4'
stackarg 4 (@0)
char 'c'
stackarg 2089 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 nextpat:

0MEMORYADDR0 				lisu 2						;random #

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				as (IS)						;add to current pattern...

0MEMORYADDR0 				ni $3f						;...mod 64...

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr (IS),a					;...to get next pattern

0MEMORYADDR0 				

0MEMORYADDR0 				dci history					;check to see if we've already done this one

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lr q,dc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,unusedpat				;not yet used, display it

char '4'
stackarg 4 (@0)
char 'u'
stackarg 2138 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;pattern already used, check for unused from top

0MEMORYADDR0 				;if not found, clear array and start over

0MEMORYADDR0 				

0MEMORYADDR0 				dci history

char 'h'
stackarg 10496 (@0)
0MEMORYADDR0 checknext:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,checknext				;will always complete because we zeroed 1 extra byte in clrhist

char '4'
stackarg 4 (@0)
char 'c'
stackarg 2116 (@0)
0MEMORYADDR0 				lr q,dc

0MEMORYADDR0 				lr a,ql

0MEMORYADDR0 				ai $ff						;lm moved us 1 past

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr ql,a

0MEMORYADDR0 				ci $40						;all done?

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				bf 4,foundone				

char '4'
stackarg 4 (@0)
char 'f'
stackarg 2137 (@0)
0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lisu 4						; set flag to start complements (random/rotations later)

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,clrhist				;no empty slots, start over

char '0'
stackarg 0 (@0)
char 'c'
stackarg 2083 (@0)
0MEMORYADDR0 foundone:

0MEMORYADDR0 				lr (IS),a					;update the current pattern

0MEMORYADDR0 				

0MEMORYADDR0 unusedpat:		

0MEMORYADDR0 				lr dc,q						;mark it used

0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				st

0MEMORYADDR0 				

0MEMORYADDR0 replay:

0MEMORYADDR0 				lisu 3						;current pattern # in r29

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				dci pats

char 'p'
stackarg 3513 (@0)
0MEMORYADDR0 				adc							; add cur pat to data pointer 5 times to get to the pat data

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				adc

0MEMORYADDR0 				

0MEMORYADDR0 getpat:			lisu 2						;read bit pattern into regs 16-20

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 getpatloop:

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr (is)+,a

0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,getpatloop

char '4'
stackarg 4 (@0)
char 'g'
stackarg 2157 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci array					;put byte pattern into RAM

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 4						;first time through 0, next time FF

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				lr 3,a						;temp

char '3'
stackarg 3 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 storepatloop2:

0MEMORYADDR0 				lis 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr a,(is)+

0MEMORYADDR0 storepatloop:

0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				bf 1,onebit

char '1'
stackarg 1 (@0)
char 'o'
stackarg 2184 (@0)
0MEMORYADDR0 				bf 0,storepat

char '0'
stackarg 0 (@0)
char 's'
stackarg 2185 (@0)
0MEMORYADDR0 onebit:

0MEMORYADDR0 				com

0MEMORYADDR0 storepat:

0MEMORYADDR0 				st

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				sl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,storepatloop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2176 (@0)
0MEMORYADDR0 				ds 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				bf 4,storepatloop2

char '4'
stackarg 4 (@0)
char 's'
stackarg 2173 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lis 0						;init variables to 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lr (IS)+,a					;r24=row (3:0)

0MEMORYADDR0                 lr (IS)+,a					;r25=col (3:1)

0MEMORYADDR0                 lr (IS)+,a             		;r26=cursor (3:2)

0MEMORYADDR0                 lr (IS)+,a					;r27=array index (3:3)

0MEMORYADDR0                 lr (IS)+,a					;r28=parameter to toggle sub (3:4)

0MEMORYADDR0                 lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr (IS)+,a					;r22=press counter lo (2:6)

0MEMORYADDR0                 lr (IS)+,a					;r23=press counter hi (2:7)

0MEMORYADDR0 

0MEMORYADDR0 				dci grid					;draw the grid

char 'g'
stackarg 3189 (@0)
0MEMORYADDR0 				pi	drawlines

char 'd'
stackarg 2895 (@0)
0MEMORYADDR0 			

0MEMORYADDR0 ;draw lights

0MEMORYADDR0 				li 24						;array index

char '2'
stackarg 24 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 sqloop:

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 2958 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bt 2,sqloop					;branch if >= 0

char '2'
stackarg 2 (@0)
char 's'
stackarg 2218 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				dci currows

char 'c'
stackarg 3303 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				lr	5,a						;upper row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				dci curcols

char 'c'
stackarg 3308 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				lr	4,a						;left col

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				dci	cursor					;start with the cursor in light 0

char 'c'
stackarg 3244 (@0)
0MEMORYADDR0 				pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 mainloop:

0MEMORYADDR0 				pi readhc

char 'r'
stackarg 2767 (@0)
0MEMORYADDR0 				lr 0,a						;save controller input

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lisu 2                		;inc random seed

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 ; redraw current square without cursor

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)+

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 2958 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $0c

char '$'
stackarg 12 (@0)
0MEMORYADDR0 				bt 4,notupdn

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2297 (@0)
0MEMORYADDR0 				ci $08

char '$'
stackarg 8 (@0)
0MEMORYADDR0 				bf 4,down

char '4'
stackarg 4 (@0)
char 'd'
stackarg 2282 (@0)
0MEMORYADDR0 				lisu 3						;up

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0						;r24 is row

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ds (IS)						;prev row

0MEMORYADDR0 				bf 2,minrow					;>=0?

char '2'
stackarg 2 (@0)
char 'm'
stackarg 2278 (@0)
0MEMORYADDR0 updcurx:

0MEMORYADDR0 				jmp updcur

char 'u'
stackarg 2491 (@0)
0MEMORYADDR0 minrow:

0MEMORYADDR0 				lis 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a	

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 down:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc							;next row

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				ci 5						;too far?

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,maxrow

char '4'
stackarg 4 (@0)
char 'm'
stackarg 2293 (@0)
0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 maxrow:

0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 notupdn:

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $03

char '$'
stackarg 3 (@0)
0MEMORYADDR0 				bt 4,notlfrt

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2330 (@0)
0MEMORYADDR0 				ci $02

char '$'
stackarg 2 (@0)
0MEMORYADDR0 				bf 4,right

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2317 (@0)
0MEMORYADDR0 				lisu 3						;left

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1						;r25 is col

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ds (IS)						;prev col

0MEMORYADDR0 				bf 2,prevcol				;>=0?

char '2'
stackarg 2 (@0)
char 'p'
stackarg 2313 (@0)
0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 prevcol:

0MEMORYADDR0 				lis 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 right:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc							;next col

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				ci 5						;too far?

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bf 4,updcurx

char '4'
stackarg 4 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,updcurx

char '0'
stackarg 0 (@0)
char 'u'
stackarg 2275 (@0)
0MEMORYADDR0 notlfrt:

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0 				bt 4,mainloop

char '4'
stackarg 4 (@0)
char 'm'
stackarg 2245 (@0)
0MEMORYADDR0 				ci $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				bt 4,pushdown

char '4'
stackarg 4 (@0)
char 'p'
stackarg 2342 (@0)
0MEMORYADDR0 				jmp replay					;pull up replays current pattern

char 'r'
stackarg 2142 (@0)
0MEMORYADDR0 

0MEMORYADDR0 pushdown:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ni $f0

char '$'
stackarg 240 (@0)
0MEMORYADDR0 				ci $40						;if game=3, can only press lit buttons

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				bf 4,allowpress

char '4'
stackarg 4 (@0)
char 'a'
stackarg 2382 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2						; get cursor loc

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,allowpress

char '4'
stackarg 4 (@0)
char 'a'
stackarg 2382 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;make a bad sound

0MEMORYADDR0 				li		$3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr		1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 sndloop:

0MEMORYADDR0 				li		$80

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lis		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				lr		5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi		delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				lis		0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf		4,sndloop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2366 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				jmp		updcur

char 'u'
stackarg 2491 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 allowpress:

0MEMORYADDR0 				lisu 2						;inc press counter

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 6		

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				lis 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ai $66

char '$'
stackarg 102 (@0)
0MEMORYADDR0 				asd (IS)					;thanks Fredric!

0MEMORYADDR0 				lr (IS)+,a

0MEMORYADDR0 				bf 2,nocarry

char '2'
stackarg 2 (@0)
char 'n'
stackarg 2396 (@0)
0MEMORYADDR0 				lis 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ai $66

char '$'
stackarg 102 (@0)
0MEMORYADDR0 				asd (IS)

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 nocarry:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6						;if mode=2 or 4, no center toggle

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f						;mode in low nibble

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 ci $2

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 bt 4,nocenter

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2417 (@0)
0MEMORYADDR0                 ci $8

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 bt 4,nocenter

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2417 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 2						; get cursor loc

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				

0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi toggle					;toggle center light

char 't'
stackarg 2812 (@0)
0MEMORYADDR0 

0MEMORYADDR0 nocenter:

0MEMORYADDR0 				dci plustable

char 'p'
stackarg 3313 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6						;if mode=3 or 4, X toggle

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f						;mode in low nibble

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 ci $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 bt 4,xtoggle				;mode 3, X toggle

char '4'
stackarg 4 (@0)
char 'x'
stackarg 2435 (@0)
0MEMORYADDR0                 ci $8

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 bt 4,xtoggle				;mode 4, X toggle

char '4'
stackarg 4 (@0)
char 'x'
stackarg 2435 (@0)
0MEMORYADDR0                 bf 0,dotoggle

char '0'
stackarg 0 (@0)
char 'd'
stackarg 2438 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 xtoggle:

0MEMORYADDR0 				dci xtable

char 'x'
stackarg 3413 (@0)
0MEMORYADDR0 dotoggle:

0MEMORYADDR0                 lisl 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lr a,(IS)					;get cursor loc

0MEMORYADDR0                 as (IS)

0MEMORYADDR0                 as (IS)

0MEMORYADDR0                 as (IS)						;*4 for table offset

0MEMORYADDR0                 adc

0MEMORYADDR0                 lm							;get 4 neighbors

0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4					;store them temporarily

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 st			;t4

0MEMORYADDR0                 lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 st			;t3

0MEMORYADDR0                 lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 st			;t2

0MEMORYADDR0                 lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 st			;t1

0MEMORYADDR0 

0MEMORYADDR0 				dci temp4                	;toggle each neighbor

char 't'
stackarg 10752 (@0)
0MEMORYADDR0 				li 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0                 pi togglem	;t1

char 't'
stackarg 2785 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 lm

0MEMORYADDR0                 pi togglem	;t2

char 't'
stackarg 2785 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 lm

0MEMORYADDR0                 pi togglem	;t3

char 't'
stackarg 2785 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 dci temp4

char 't'
stackarg 10752 (@0)
0MEMORYADDR0                 pi togglem	;t4

char 't'
stackarg 2785 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 updcur:

0MEMORYADDR0 				lisu 3						;calc index from row and col

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)

0MEMORYADDR0 				as (IS)						;row * 5

0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				as (IS)+					;add in col

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 

0MEMORYADDR0 				dci currows					;get row and column to draw cursor

char 'c'
stackarg 3303 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lr a,(IS)+

0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci curcols

char 'c'
stackarg 3308 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				dci	cursor					;draw the cursor

char 'c'
stackarg 3244 (@0)
0MEMORYADDR0 				pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				LI $3F						;debounce by pausing a while

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				LR 5,A

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 pi delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				;check for all green (win)

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				li 24						;array index

char '2'
stackarg 24 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 chkloop:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,lighton

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2546 (@0)
0MEMORYADDR0 				jmp mainloop				;not a win

char 'm'
stackarg 2245 (@0)
0MEMORYADDR0 lighton:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bt 2,chkloop

char '2'
stackarg 2 (@0)
char 'c'
stackarg 2538 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				;made it here, all off

0MEMORYADDR0 				;make a winning sound

0MEMORYADDR0 				li		$3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr		1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd2loop:

0MEMORYADDR0 				li		$40

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr		a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd2loopa:

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf		4,snd2loopa

char '4'
stackarg 4 (@0)
char 's'
stackarg 2561 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lis		0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs	5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds		1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf		4,snd2loop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2557 (@0)
0MEMORYADDR0 						

0MEMORYADDR0                 li 32				;draw 2 concentric squares

char '3'
stackarg 32 (@0)
0MEMORYADDR0                 lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 li 18

char '1'
stackarg 18 (@0)
0MEMORYADDR0                 lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 dci winsq1

char 'w'
stackarg 3247 (@0)
0MEMORYADDR0                 pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0                 li 34

char '3'
stackarg 34 (@0)
0MEMORYADDR0                 lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 li 20

char '2'
stackarg 20 (@0)
0MEMORYADDR0                 lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 dci winsq2

char 'w'
stackarg 3250 (@0)
0MEMORYADDR0                 pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 ;print # of moves from r23/22 (2:7/6)

0MEMORYADDR0                 li $1e				;row

char '$'
stackarg 30 (@0)
0MEMORYADDR0                 lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisu 2				;1000s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 sr 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 bt 4,lt1000

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2613 (@0)
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 li $2a

char '$'
stackarg 42 (@0)
0MEMORYADDR0                 lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d100

char '0'
stackarg 0 (@0)
char 'd'
stackarg 2616 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt1000:

0MEMORYADDR0 				li $2c

char '$'
stackarg 44 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d100:				

0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;100s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 bf 4,gt100

char '4'
stackarg 4 (@0)
char 'g'
stackarg 2632 (@0)
0MEMORYADDR0                 lr a,(IS)			;print 0 if x0yz where x > 0

0MEMORYADDR0                 ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 bt 4,lt100

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2640 (@0)
0MEMORYADDR0                 lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 gt100:

0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d10

char '0'
stackarg 0 (@0)
char 'd'
stackarg 2643 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt100:

0MEMORYADDR0 				li $30

char '$'
stackarg 48 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d10:

0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;10s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 sr 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 bf 4,gt10

char '4'
stackarg 4 (@0)
char 'g'
stackarg 2659 (@0)
0MEMORYADDR0                 lisl 7				;print 0 if xy0z where x or y > 0

char '7'
stackarg 7 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 bt 4,lt10

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2667 (@0)
0MEMORYADDR0                 lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 gt10:

0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 bf 0,d1

char '0'
stackarg 0 (@0)
char 'd'
stackarg 2670 (@0)
0MEMORYADDR0 

0MEMORYADDR0 lt10:

0MEMORYADDR0 				li $34

char '$'
stackarg 52 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 d1:

0MEMORYADDR0 				lr a,1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				inc

0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0                 lisu 2				;1s digit

char '2'
stackarg 2 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 oi $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0                 lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 pi drawchar

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 waitupdn:

0MEMORYADDR0                 pi readhc			;wait for hc up/down

char 'r'
stackarg 2767 (@0)
0MEMORYADDR0                 ni $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0                 bt 4,waitupdn

char '4'
stackarg 4 (@0)
char 'w'
stackarg 2684 (@0)
0MEMORYADDR0                 ni $80

char '$'
stackarg 128 (@0)
0MEMORYADDR0                 bt 4,redo

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2698 (@0)
0MEMORYADDR0                 jmp nextpat			;down - get next random pattern

char 'n'
stackarg 2094 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 redo:

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ci $41

char '$'
stackarg 65 (@0)
0MEMORYADDR0                 bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2764 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ci 51

char '5'
stackarg 51 (@0)
0MEMORYADDR0                 bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2764 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 				lisu 2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 7

char '7'
stackarg 7 (@0)
0MEMORYADDR0 				lr a,(IS)-

0MEMORYADDR0 				ci 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2764 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				ci $18

char '$'
stackarg 24 (@0)
0MEMORYADDR0 				bf 4,replay2

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2764 (@0)
0MEMORYADDR0 

0MEMORYADDR0 		        LI		$d6

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn

char 'c'
stackarg 208 (@0)
0MEMORYADDR0                 		              

0MEMORYADDR0                 dci blitparm

char 'b'
stackarg 3840 (@0)
0MEMORYADDR0                 pi blit

char 'b'
stackarg 3003 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 				li $3f

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr 1,a

char '1'
stackarg 1 (@0)
0MEMORYADDR0 snd3loop:

0MEMORYADDR0 				li $40

char '$'
stackarg 64 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				li $1

char '$'
stackarg 1 (@0)
0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi delay

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ds 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				bf 4,snd3loop

char '4'
stackarg 4 (@0)
char 's'
stackarg 2738 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				pi readhc

char 'r'
stackarg 2767 (@0)
0MEMORYADDR0 		        LI		$d6

char '$'
stackarg 214 (@0)
0MEMORYADDR0                 LR		$3,A

char '$'
stackarg 3 (@0)
0MEMORYADDR0                 PI		clrscrn

char 'c'
stackarg 208 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				jmp nextpat			

char 'n'
stackarg 2094 (@0)
0MEMORYADDR0 replay2:

0MEMORYADDR0 				jmp replay			;up - replay current pattern

char 'r'
stackarg 2142 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 readhc:								;wait until one of the hand controllers is moved

0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				outs 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				ins 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				com					;un-invert port data

0MEMORYADDR0 				ni $cf				;mask off twists, since we don't use them

char '$'
stackarg 207 (@0)
0MEMORYADDR0 				bf 4,gothc

char '4'
stackarg 4 (@0)
char 'g'
stackarg 2784 (@0)
0MEMORYADDR0 				outs 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				ins 1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				ni $cf

char '$'
stackarg 207 (@0)
0MEMORYADDR0 				bt 4,readhc

char '4'
stackarg 4 (@0)
char 'r'
stackarg 2767 (@0)
0MEMORYADDR0 gothc:			pop

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 togglem:							;change a square (index in memory) from red to green or vice versa

0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 0,a

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $80				;if high bit set, then this was a wrap

char '$'
stackarg 128 (@0)
0MEMORYADDR0 				bt 4,notwrapped

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2804 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 lisl 6				;if game=$2x, allow wrap-around

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 lr a,(IS)

0MEMORYADDR0                 ni $f0				;mode in low nibble

char '$'
stackarg 240 (@0)
0MEMORYADDR0                 ci $20

char '$'
stackarg 32 (@0)
0MEMORYADDR0 				bf 4,toggleexit2	;no wrap allowed

char '4'
stackarg 4 (@0)
char 't'
stackarg 2846 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 notwrapped:

0MEMORYADDR0 				lr a,0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				ni $7f				;strip off "wrapped" bit

char '$'
stackarg 127 (@0)
0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				bf 0,toggle2

char '0'
stackarg 0 (@0)
char 't'
stackarg 2819 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 toggle:								;change a square (index in r28) from red to green or vice versa

0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,(IS)		

0MEMORYADDR0 toggle2:

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				bt 4,notset

char '4'
stackarg 4 (@0)
char 'n'
stackarg 2836 (@0)
0MEMORYADDR0 				lis 0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				bf 0,toggleexit

char '0'
stackarg 0 (@0)
char 't'
stackarg 2838 (@0)
0MEMORYADDR0 notset:

0MEMORYADDR0 				li $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 

0MEMORYADDR0 toggleexit:

0MEMORYADDR0 				st

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,(IS)-

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				pi drawlight

char 'd'
stackarg 2958 (@0)
0MEMORYADDR0 toggleexit2:

0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 square:							;draw a square

0MEMORYADDR0 		; dci to color,width,height

0MEMORYADDR0 		;r5=upper row

0MEMORYADDR0 		;r4=left col

0MEMORYADDR0 		; uses r2,r3,r6

0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				outs	1		;set the color

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm				;

0MEMORYADDR0 				lr 5,a			;save the width

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 3,a			;store the height

char '3'
stackarg 3 (@0)
0MEMORYADDR0 

0MEMORYADDR0 squarev:

0MEMORYADDR0 				lr a,4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr 2,a			;save col

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lr a,5			;get width

char '5'
stackarg 5 (@0)
0MEMORYADDR0 squareh:		lr 6,a			;save temp

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				outs	4		;set the col

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lr a,2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				inc				;next col

0MEMORYADDR0 				lr 2,a

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				pi plot

char 'p'
stackarg 2946 (@0)
0MEMORYADDR0 							

0MEMORYADDR0 				lr a,6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 4,squareh	;all done w/row

char '4'
stackarg 4 (@0)
char 's'
stackarg 2866 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				ins 5			;next row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				ai $ff			;complement, so subtract 1

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				outs 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,3			

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				lr 3,a

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				bf 4,squarev	;done full height?

char '4'
stackarg 4 (@0)
char 's'
stackarg 2863 (@0)
0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 				

0MEMORYADDR0 				

0MEMORYADDR0 drawlines:		; dci to table of 	color,len,row,start col (horiz if len<$80)

0MEMORYADDR0 				;					color,len,col,start row (vert if len>$80)

0MEMORYADDR0 				;					repeat until $FF

0MEMORYADDR0 				;uses r5

0MEMORYADDR0 				lr	k,p

0MEMORYADDR0 line2:

0MEMORYADDR0 				lm

0MEMORYADDR0 				ci $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,lineexit	;ff means done

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2925 (@0)
0MEMORYADDR0 				outs	1		;set the color

char '1'
stackarg 1 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lm				;get len

0MEMORYADDR0 				ni $ff			;lm doesn't set status flags

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf 1,vline		;vertical lines are negative (and sign bit backwards)

char '1'
stackarg 1 (@0)
char 'v'
stackarg 2926 (@0)
0MEMORYADDR0 				lr 5,a			;horiz-save len

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm				;get starting column

0MEMORYADDR0 hline2:

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 4			;set the column

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				pi plot

char 'p'
stackarg 2946 (@0)
0MEMORYADDR0 				ds 5								

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,line2

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2896 (@0)
0MEMORYADDR0 				ins 4			; 

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf  0,hline2

char '0'
stackarg 0 (@0)
char 'h'
stackarg 2912 (@0)
0MEMORYADDR0 lineexit:

0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 vline:

0MEMORYADDR0 				ni $3f			;mask off sign bit, limit len to 63 (height of screen)

char '$'
stackarg 63 (@0)
0MEMORYADDR0 				lr 5,a			;save it

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lm

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 4			;set the column

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				lm				;get starting row

0MEMORYADDR0 vline2:

0MEMORYADDR0 				com

0MEMORYADDR0 				outs 5			;set the row

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				pi plot		

char 'p'
stackarg 2946 (@0)
0MEMORYADDR0 				ds 5								

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				bt 4,line2

char '4'
stackarg 4 (@0)
char 'l'
stackarg 2896 (@0)
0MEMORYADDR0 				ins 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				com

0MEMORYADDR0 				inc

0MEMORYADDR0 				bf  0,vline2

char '0'
stackarg 0 (@0)
char 'v'
stackarg 2933 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				

0MEMORYADDR0 plot:							;this is what you have to do to transfer data to the screen memory

0MEMORYADDR0 								;after setting row, column and color

0MEMORYADDR0 				li	$60

char '$'
stackarg 96 (@0)
0MEMORYADDR0 				outs	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				li	$50

char '$'
stackarg 80 (@0)
0MEMORYADDR0 				outs	0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				lis	6	; little delay

char '6'
stackarg 6 (@0)
0MEMORYADDR0 pdelay:			ai $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bf	4,pdelay

char '4'
stackarg 4 (@0)
char 'p'
stackarg 2953 (@0)
0MEMORYADDR0 				pop

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 drawlight:						;draws a red or green square based off value passed in r27

0MEMORYADDR0 				lr k,p

0MEMORYADDR0 				pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 

0MEMORYADDR0 				lisu 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lisl 3

char '3'
stackarg 3 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci sqrows

char 's'
stackarg 3253 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm		

0MEMORYADDR0 				lr 5,a

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				dci sqcols

char 's'
stackarg 3278 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				lr 4,a

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				lr a,(IS)					; read color from array

0MEMORYADDR0 				dci array

char 'a'
stackarg 10240 (@0)
0MEMORYADDR0 				adc

0MEMORYADDR0 				lm

0MEMORYADDR0 				ni $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				bt 4,dogreen

char '4'
stackarg 4 (@0)
char 'd'
stackarg 2993 (@0)
0MEMORYADDR0 				dci redsq

char 'r'
stackarg 3238 (@0)
0MEMORYADDR0 				bf 0,dosq

char '0'
stackarg 0 (@0)
char 'd'
stackarg 2996 (@0)
0MEMORYADDR0 dogreen:

0MEMORYADDR0 				dci greensq

char 'g'
stackarg 3241 (@0)
0MEMORYADDR0 dosq:

0MEMORYADDR0 				pi square

char 's'
stackarg 2850 (@0)
0MEMORYADDR0 				pi popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				pk

0MEMORYADDR0 

0MEMORYADDR0 ;blit code from cart 26

0MEMORYADDR0 blit:

0MEMORYADDR0          		LR      K,P 

0MEMORYADDR0          		pi pushk

char 'p'
stackarg 263 (@0)
0MEMORYADDR0          		LISU    0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 blitloop:

0MEMORYADDR0 				LISL    4

char '4'
stackarg 4 (@0)
0MEMORYADDR0 getparms:

0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      (IS)-,A

0MEMORYADDR0 				BR7     getparms

char 'g'
stackarg 3009 (@0)
0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      H,DC

0MEMORYADDR0 				DCI     blitparm

char 'b'
stackarg 3840 (@0)
0MEMORYADDR0 				ADC         

0MEMORYADDR0 				

0MEMORYADDR0 				LIS     1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				LR      $7,A

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				INS     5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 				NI      $c0

char '$'
stackarg 192 (@0)
0MEMORYADDR0 				AS      $1

char '$'
stackarg 1 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2z:

0MEMORYADDR0 				OUTS    5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				DS      $3

char '$'
stackarg 3 (@0)
0MEMORYADDR0 				BF      2,blitexit

char '2'
stackarg 2 (@0)
char 'b'
stackarg 3083 (@0)
0MEMORYADDR0 				LR      A,$2

char '$'
stackarg 2 (@0)
0MEMORYADDR0 				LR      $5,A

char '$'
stackarg 5 (@0)
0MEMORYADDR0 				LR      A,$0

char '$'
stackarg 0 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2a:

0MEMORYADDR0 				OUTS    4  

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				DS      $7

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				BF      4,blit2c

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3050 (@0)
0MEMORYADDR0 				LIS     8

char '8'
stackarg 8 (@0)
0MEMORYADDR0 				LR      $7,A

char '$'
stackarg 7 (@0)
0MEMORYADDR0 				LM          

0MEMORYADDR0 				LR      $6,A

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LIS     1

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				NS      $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      4,blit2b

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3049 (@0)
0MEMORYADDR0 				LIS     0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				COM         

0MEMORYADDR0 blit2b:

0MEMORYADDR0 				ADC         

0MEMORYADDR0 blit2c:

0MEMORYADDR0 				LR      A,$6

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				AS      $6

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LR      $6,A

char '$'
stackarg 6 (@0)
0MEMORYADDR0 				LR      A,$4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      2,blit2d

char '2'
stackarg 2 (@0)
char 'b'
stackarg 3057 (@0)
0MEMORYADDR0 				LIS     0

char '0'
stackarg 0 (@0)
0MEMORYADDR0 blit2d:

0MEMORYADDR0 				COM         

0MEMORYADDR0 				OUTS    1  

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				LIS     6

char '6'
stackarg 6 (@0)
0MEMORYADDR0 				SL      4   

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				OUTS    0  

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				SL      1   

char '1'
stackarg 1 (@0)
0MEMORYADDR0 				OUTS    0  

char '0'
stackarg 0 (@0)
0MEMORYADDR0 				BF      0,blit2e

char '0'
stackarg 0 (@0)
char 'b'
stackarg 3066 (@0)
0MEMORYADDR0 blit2e:

0MEMORYADDR0 				AI      $60

char '$'
stackarg 96 (@0)
0MEMORYADDR0 				BF      4,blit2e

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3066 (@0)
0MEMORYADDR0 				DS      $5

char '$'
stackarg 5 (@0)
0MEMORYADDR0 				BT      4,blit2f

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3078 (@0)
0MEMORYADDR0 				INS     4  

char '4'
stackarg 4 (@0)
0MEMORYADDR0 				AI      $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				BF      0,blit2a

char '0'
stackarg 0 (@0)
char 'b'
stackarg 3035 (@0)
0MEMORYADDR0 blit2f:

0MEMORYADDR0 				INS     5  

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				AI      $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 				BF      0,blit2z

char '0'
stackarg 0 (@0)
char 'b'
stackarg 3027 (@0)
0MEMORYADDR0 blitexit:

0MEMORYADDR0 

0MEMORYADDR0 				LR      DC,H

0MEMORYADDR0 				LIS     2

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				NS      $4

char '$'
stackarg 4 (@0)
0MEMORYADDR0 				BT      4,blitloop

char '4'
stackarg 4 (@0)
char 'b'
stackarg 3008 (@0)
0MEMORYADDR0 				pi 		popk

char 'p'
stackarg 286 (@0)
0MEMORYADDR0 				PK          

0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 ;from the BIOS, but I removed T? (time) prompt

0MEMORYADDR0 prompts:        LR   K,P                 ; 

0MEMORYADDR0                 PI   pushk               ; 

char 'p'
stackarg 263 (@0)
0MEMORYADDR0 prompts2:       LI   $85                 ; red 5 (S)

char '$'
stackarg 133 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   prompt              ; 

char 'p'
stackarg 3128 (@0)
0MEMORYADDR0                 LR   A,$4                ; 

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 CI   $08                 ; is it button 4, Start?

char '$'
stackarg 8 (@0)
0MEMORYADDR0                 BF   $4,notbut4          ; no, check others

char '$'
stackarg 4 (@0)
char 'n'
stackarg 3111 (@0)
0MEMORYADDR0 notbut2:

0MEMORYADDR0                 PI   popk                ; yes, return

char 'p'
stackarg 286 (@0)
0MEMORYADDR0                 PK                       ; 

0MEMORYADDR0                 

0MEMORYADDR0 notbut4:        CI   $02                 ; is it button 2, Mode?

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 BF   $4,notbut2          ; 

char '$'
stackarg 4 (@0)
char 'n'
stackarg 3107 (@0)
0MEMORYADDR0                 LI   $8e                 ; red M

char '$'
stackarg 142 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   prompt              ; 

char 'p'
stackarg 3128 (@0)
0MEMORYADDR0                 LISU 3                   ; 

char '3'
stackarg 3 (@0)
0MEMORYADDR0                 LISL 6                   ; 

char '6'
stackarg 6 (@0)
0MEMORYADDR0                 LR   A,(IS)                ; 

0MEMORYADDR0                 as	4					;add the mode to the game #

char '4'
stackarg 4 (@0)
0MEMORYADDR0                 LR   (IS),A              ; 

0MEMORYADDR0                 BF   $0,prompts2         ; 

char '$'
stackarg 0 (@0)
char 'p'
stackarg 3096 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 

0MEMORYADDR0 ;from the BIOS, but I added random # seed to readbuts

0MEMORYADDR0 prompt:         LR   K,P                 ; $0099 - prints char r0 at row r1, col r2, waits for button

0MEMORYADDR0                 PI   pushk               ; 

char 'p'
stackarg 263 (@0)
0MEMORYADDR0                 LI   $33                 ; r1=$33

char '$'
stackarg 51 (@0)
0MEMORYADDR0                 LR   $1,A                ; 

char '$'
stackarg 1 (@0)
0MEMORYADDR0                 LI   $13                 ; r2=$13

char '$'
stackarg 19 (@0)
0MEMORYADDR0                 LR   $2,A                ; 

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 LI   $8b                 ; r0=8b	red ?

char '$'
stackarg 139 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 

0MEMORYADDR0                 PI   readbuts            ; 

char 'r'
stackarg 3168 (@0)
0MEMORYADDR0                 LI   $33                 ; r1=$33

char '$'
stackarg 51 (@0)
0MEMORYADDR0                 LR   $1,A                ; 

char '$'
stackarg 1 (@0)
0MEMORYADDR0                 LI   $13                 ; r2=$13

char '$'
stackarg 19 (@0)
0MEMORYADDR0                 LR   $2,A                ; 

char '$'
stackarg 2 (@0)
0MEMORYADDR0                 LIS  $d                  ; r0=$d

char '$'
stackarg 13 (@0)
0MEMORYADDR0                 LR   $0,A                ; 

char '$'
stackarg 0 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 PI   drawchar            ; 

char 'd'
stackarg 1657 (@0)
0MEMORYADDR0                 PI   popk                ; 

char 'p'
stackarg 286 (@0)
0MEMORYADDR0                 PK                       ; 

0MEMORYADDR0                 

0MEMORYADDR0 readbuts:

0MEMORYADDR0 				lisu 2                	;inc random seed

char '2'
stackarg 2 (@0)
0MEMORYADDR0 				lisl 5

char '5'
stackarg 5 (@0)
0MEMORYADDR0 				lr a,(IS)

0MEMORYADDR0 				inc

0MEMORYADDR0 				lr (IS),a

0MEMORYADDR0 				

0MEMORYADDR0 		        INS  0                   ; $00c1 - read buttons

char '0'
stackarg 0 (@0)
0MEMORYADDR0                 COM                      ; 

0MEMORYADDR0                 NI   $0f                 ; 

char '$'
stackarg 15 (@0)
0MEMORYADDR0                 BT   4,readbuts          ; 

char '4'
stackarg 4 (@0)
char 'r'
stackarg 3168 (@0)
0MEMORYADDR0                 LR   $4,A                ; 

char '$'
stackarg 4 (@0)
0MEMORYADDR0                 LI   $ff                 ; 

char '$'
stackarg 255 (@0)
0MEMORYADDR0                 LR   $5,A                ; 

char '$'
stackarg 5 (@0)
0MEMORYADDR0 dbounce:        DS   $5                  ; 

char '$'
stackarg 5 (@0)
0MEMORYADDR0                 BF   $4,dbounce         ; 

char '$'
stackarg 4 (@0)
char 'd'
stackarg 3183 (@0)
0MEMORYADDR0                 jmp delay            ; 

char 'd'
stackarg 143 (@0)
0MEMORYADDR0 

0MEMORYADDR0 

0MEMORYADDR0 ;colors: $40-red, $80=blue, $0=green, $c0=bkg

0MEMORYADDR0 

0MEMORYADDR0 ;data to draw lines for grid

0MEMORYADDR0 grid:				;horiz-color,len,row,start col

0MEMORYADDR0 				db $80,66,7,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '7'
stackarg 7 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,17,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '1'
stackarg 17 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,27,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '2'
stackarg 27 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,37,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '3'
stackarg 37 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,47,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '4'
stackarg 47 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db $80,66,57,18

char '$'
stackarg 128 (@0)
char ','
char '6'
stackarg 66 (@0)
char ','
char '5'
stackarg 57 (@0)
char ','
char '1'
stackarg 18 (@0)
0MEMORYADDR0 					;vert-color,$80+len,col,start row

0MEMORYADDR0 				db $80,179,18,7	;179=128+51

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,31,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '3'
stackarg 31 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,44,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '4'
stackarg 44 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,57,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '5'
stackarg 57 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,70,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '7'
stackarg 70 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $80,179,83,7

char '$'
stackarg 128 (@0)
char ','
char '1'
stackarg 179 (@0)
char ','
char '8'
stackarg 83 (@0)
char ','
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db $ff

char '$'
stackarg 255 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;data to draw squares

0MEMORYADDR0 redsq:				;color,width,height

0MEMORYADDR0 				db $40,12,9

char '$'
stackarg 64 (@0)
char ','
char '1'
stackarg 12 (@0)
char ','
char '9'
stackarg 9 (@0)
0MEMORYADDR0 greensq:			;color,width,height

0MEMORYADDR0 				db $0,12,9

char '$'
stackarg 0 (@0)
char ','
char '1'
stackarg 12 (@0)
char ','
char '9'
stackarg 9 (@0)
0MEMORYADDR0 cursor:				;color,width,height

0MEMORYADDR0 				db $c0,4,3

char '$'
stackarg 192 (@0)
char ','
char '4'
stackarg 4 (@0)
char ','
char '3'
stackarg 3 (@0)
0MEMORYADDR0 winsq1:

0MEMORYADDR0 				db $40,38,29	;red

char '$'
stackarg 64 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '2'
stackarg 29 (@0)
0MEMORYADDR0 winsq2:

0MEMORYADDR0 				db $c0,34,25	;bkg

char '$'
stackarg 192 (@0)
char ','
char '3'
stackarg 34 (@0)
char ','
char '2'
stackarg 25 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;locations to draw each light, based on index (0-24)

0MEMORYADDR0 sqrows:			

0MEMORYADDR0 				db   8, 8, 8, 8, 8,18,18,18,18,18,28,28,28,28,28,38,38,38,38,38,48,48,48,48,48

char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 18 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '2'
stackarg 28 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '3'
stackarg 38 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
char ','
char '4'
stackarg 48 (@0)
0MEMORYADDR0 sqcols:			

0MEMORYADDR0 				db  19,32,45,58,71,19,32,45,58,71,19,32,45,58,71,19,32,45,58,71,19,32,45,58,71

char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '3'
stackarg 32 (@0)
char ','
char '4'
stackarg 45 (@0)
char ','
char '5'
stackarg 58 (@0)
char ','
char '7'
stackarg 71 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 ;locations to draw cursor, based on row/column

0MEMORYADDR0 currows:

0MEMORYADDR0 				db	11,21,31,41,51

char '1'
stackarg 11 (@0)
char ','
char '2'
stackarg 21 (@0)
char ','
char '3'
stackarg 31 (@0)
char ','
char '4'
stackarg 41 (@0)
char ','
char '5'
stackarg 51 (@0)
0MEMORYADDR0 curcols:

0MEMORYADDR0 				db	23,36,49,62,75

char '2'
stackarg 23 (@0)
char ','
char '3'
stackarg 36 (@0)
char ','
char '4'
stackarg 49 (@0)
char ','
char '6'
stackarg 62 (@0)
char ','
char '7'
stackarg 75 (@0)
0MEMORYADDR0 

0MEMORYADDR0 plustable:		;squares to toggle based on cursor N E W S +128 means wrapped

0MEMORYADDR0 				db 148,  1,132,  5

char '1'
stackarg 148 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
0MEMORYADDR0 				db 149,  2,  0,  6

char '1'
stackarg 149 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '0'
stackarg 0 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
0MEMORYADDR0 				db 150,  3,  1,  7

char '1'
stackarg 150 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db 151,  4,  2,  8  

char '1'
stackarg 151 (@0)
char ','
char ' '
char '4'
stackarg 4 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
0MEMORYADDR0 				db 152,128,  3,  9

char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db   0,  6,137, 10

char '0'
stackarg 0 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char '1'
stackarg 137 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
0MEMORYADDR0 				db   1,  7,  5, 11

char '1'
stackarg 1 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
0MEMORYADDR0 				db   2,  8,  6, 12

char '2'
stackarg 2 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
0MEMORYADDR0 				db   3,  9,  7, 13

char '3'
stackarg 3 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
0MEMORYADDR0 				db   4,133,  8, 14

char '4'
stackarg 4 (@0)
char ','
char '1'
stackarg 133 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db   5, 11,142, 15

char '5'
stackarg 5 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
0MEMORYADDR0 				db   6, 12, 10, 16

char '6'
stackarg 6 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
0MEMORYADDR0 				db   7, 13, 11, 17

char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
0MEMORYADDR0 				db   8, 14, 12, 18

char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db   9,138, 13, 19

char '9'
stackarg 9 (@0)
char ','
char '1'
stackarg 138 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db  10, 16,147, 20

char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char '1'
stackarg 147 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
0MEMORYADDR0 				db  11, 17, 15, 21

char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
0MEMORYADDR0 				db  12, 18, 16, 22

char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
0MEMORYADDR0 				db  13, 19, 17, 23

char '1'
stackarg 13 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
0MEMORYADDR0 				db  14,143, 18, 24

char '1'
stackarg 14 (@0)
char ','
char '1'
stackarg 143 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db  15, 21,152,128

char '1'
stackarg 15 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 128 (@0)
0MEMORYADDR0 				db  16, 22, 20,129

char '1'
stackarg 16 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
char ','
char '1'
stackarg 129 (@0)
0MEMORYADDR0 				db  17, 23, 21,130

char '1'
stackarg 17 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char '1'
stackarg 130 (@0)
0MEMORYADDR0 				db  18, 24, 22,131

char '1'
stackarg 18 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char '1'
stackarg 131 (@0)
0MEMORYADDR0 				db  19,148, 23,132

char '1'
stackarg 19 (@0)
char ','
char '1'
stackarg 148 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char '1'
stackarg 132 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 xtable:		;squares to toggle based on cursor NW NE SW SE +128 means wrapped

0MEMORYADDR0 				db 152,149,137,  6

char '1'
stackarg 152 (@0)
char ','
char '1'
stackarg 149 (@0)
char ','
char '1'
stackarg 137 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
0MEMORYADDR0 				db 148,150,  5,  7

char '1'
stackarg 148 (@0)
char ','
char '1'
stackarg 150 (@0)
char ','
char ' '
char '5'
stackarg 5 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
0MEMORYADDR0 				db 149,151,  6,  8

char '1'
stackarg 149 (@0)
char ','
char '1'
stackarg 151 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
0MEMORYADDR0 				db 150,152,  7,  9

char '1'
stackarg 150 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
0MEMORYADDR0 				db 151,148,  8,133

char '1'
stackarg 151 (@0)
char ','
char '1'
stackarg 148 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 133 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 132,  1,142, 11

char '1'
stackarg 132 (@0)
char ','
char ' '
char '1'
stackarg 1 (@0)
char ','
char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
0MEMORYADDR0 				db   0,  2, 10, 12

char '0'
stackarg 0 (@0)
char ','
char ' '
char '2'
stackarg 2 (@0)
char ','
char ' '
char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
0MEMORYADDR0 				db   1,  3, 11, 13

char '1'
stackarg 1 (@0)
char ','
char ' '
char '3'
stackarg 3 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
0MEMORYADDR0 				db   2,  4, 12, 14

char '2'
stackarg 2 (@0)
char ','
char ' '
char '4'
stackarg 4 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
0MEMORYADDR0 				db   3,128, 13,138

char '3'
stackarg 3 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char '1'
stackarg 138 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 137,  6,147, 16

char '1'
stackarg 137 (@0)
char ','
char ' '
char '6'
stackarg 6 (@0)
char ','
char '1'
stackarg 147 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
0MEMORYADDR0 				db   5,  7, 15, 17

char '5'
stackarg 5 (@0)
char ','
char ' '
char '7'
stackarg 7 (@0)
char ','
char ' '
char '1'
stackarg 15 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
0MEMORYADDR0 				db   6,  8, 16, 18

char '6'
stackarg 6 (@0)
char ','
char ' '
char '8'
stackarg 8 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
0MEMORYADDR0 				db   7,  9, 17, 19

char '7'
stackarg 7 (@0)
char ','
char ' '
char '9'
stackarg 9 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
0MEMORYADDR0 				db   8,133, 18,143

char '8'
stackarg 8 (@0)
char ','
char '1'
stackarg 133 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 143 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 142, 11,152, 21

char '1'
stackarg 142 (@0)
char ','
char ' '
char '1'
stackarg 11 (@0)
char ','
char '1'
stackarg 152 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
0MEMORYADDR0 				db  10, 12, 20, 22

char '1'
stackarg 10 (@0)
char ','
char ' '
char '1'
stackarg 12 (@0)
char ','
char ' '
char '2'
stackarg 20 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
0MEMORYADDR0 				db  11, 13, 21, 23

char '1'
stackarg 11 (@0)
char ','
char ' '
char '1'
stackarg 13 (@0)
char ','
char ' '
char '2'
stackarg 21 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
0MEMORYADDR0 				db  12, 14, 22, 24

char '1'
stackarg 12 (@0)
char ','
char ' '
char '1'
stackarg 14 (@0)
char ','
char ' '
char '2'
stackarg 22 (@0)
char ','
char ' '
char '2'
stackarg 24 (@0)
0MEMORYADDR0 				db  13,138, 23,148

char '1'
stackarg 13 (@0)
char ','
char '1'
stackarg 138 (@0)
char ','
char ' '
char '2'
stackarg 23 (@0)
char ','
char '1'
stackarg 148 (@0)
0MEMORYADDR0 				

0MEMORYADDR0 				db 147, 16,132,129

char '1'
stackarg 147 (@0)
char ','
char ' '
char '1'
stackarg 16 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char '1'
stackarg 129 (@0)
0MEMORYADDR0 				db  15, 17,128,130

char '1'
stackarg 15 (@0)
char ','
char ' '
char '1'
stackarg 17 (@0)
char ','
char '1'
stackarg 128 (@0)
char ','
char '1'
stackarg 130 (@0)
0MEMORYADDR0 				db  16, 18,129,131

char '1'
stackarg 16 (@0)
char ','
char ' '
char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 129 (@0)
char ','
char '1'
stackarg 131 (@0)
0MEMORYADDR0 				db  17, 19,130,132

char '1'
stackarg 17 (@0)
char ','
char ' '
char '1'
stackarg 19 (@0)
char ','
char '1'
stackarg 130 (@0)
char ','
char '1'
stackarg 132 (@0)
0MEMORYADDR0 				db  18,143,132,128 

char '1'
stackarg 18 (@0)
char ','
char '1'
stackarg 143 (@0)
char ','
char '1'
stackarg 132 (@0)
char ','
char '1'
stackarg 128 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;the patterns - 1 bit is red, 0 is green

0MEMORYADDR0 ;other code has to be adjusted to use more or less than 64 patterns

0MEMORYADDR0 ;not all of these are solvable on a torus or if only the neighbors toggle

0MEMORYADDR0 pats:

0MEMORYADDR0 ;				db 		$00,$00,$00,$80,$c0		; easy one for test

0MEMORYADDR0 

0MEMORYADDR0                 db      $20,$50,$88,$F8,$88

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $F0,$88,$88,$88,$F0

char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0                 db      $F8,$80,$F8,$80,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $F8,$80,$F0,$80,$80

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0                 db      $88,$88,$F8,$88,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $F8,$20,$20,$20,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $90,$A0,$C0,$A0,$90

char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 144 (@0)
0MEMORYADDR0                 db      $80,$80,$80,$80,$F8

char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $88,$D8,$A8,$88,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$C8,$A8,$98,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 152 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $70,$88,$88,$88,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $70,$88,$A8,$90,$68

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 104 (@0)
0MEMORYADDR0                 db      $70,$80,$70,$08,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$20,$20,$20,$20

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $88,$88,$A8,$D8,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$50,$20,$50,$88

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
0MEMORYADDR0                 db      $88,$50,$20,$20,$20

char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $F8,$10,$20,$40,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $50,$50,$00,$70,$20

char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $20,$70,$F8,$70,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $D8,$20,$20,$20,$D8

char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 216 (@0)
0MEMORYADDR0                 db      $00,$00,$20,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $00,$20,$50,$20,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$00,$88,$00,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $50,$A8,$50,$A8,$50

char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
0MEMORYADDR0                 db      $A8,$70,$F8,$70,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $00,$D8,$50,$D8,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$88,$20,$88,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $F8,$A8,$88,$A8,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $20,$60,$20,$20,$70

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 96 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $70,$08,$70,$80,$F8

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $70,$08,$70,$08,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$00,$70,$00,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0                 db      $70,$88,$70,$88,$70

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 112 (@0)
0MEMORYADDR0                 db      $F8,$88,$50,$70,$00

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $F8,$70,$20,$00,$00

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$20,$F8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $A8,$88,$F8,$88,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $C0,$A0,$A8,$28,$18

char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $18,$08,$20,$80,$C0

char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 192 (@0)
0MEMORYADDR0                 db      $D8,$88,$50,$88,$D8

char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 216 (@0)
0MEMORYADDR0                 db      $18,$C0,$18,$C0,$18

char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 24 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $A8,$A8,$A8,$A8,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $00,$F8,$00,$F8,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $10,$78,$50,$F0,$40

char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 64 (@0)
0MEMORYADDR0                 db      $C0,$E0,$70,$38,$18

char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 24 (@0)
0MEMORYADDR0                 db      $60,$90,$70,$48,$30

char '$'
stackarg 96 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 48 (@0)
0MEMORYADDR0                 db      $A8,$A8,$50,$A8,$A8

char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $98,$F0,$50,$78,$C8

char '$'
stackarg 152 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 200 (@0)
0MEMORYADDR0                 db      $70,$A8,$F8,$F8,$A8

char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 168 (@0)
0MEMORYADDR0                 db      $A0,$E0,$B8,$10,$38

char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 184 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 56 (@0)
0MEMORYADDR0                 db      $00,$00,$F8,$50,$50	; pi pattern

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 80 (@0)
0MEMORYADDR0                 db      $00,$40,$00,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $00,$50,$00,$50,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $10,$48,$20,$90,$40

char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 64 (@0)
0MEMORYADDR0                 db      $78,$E8,$F8,$B8,$F0

char '$'
stackarg 120 (@0)
char ','
char '$'
stackarg 232 (@0)
char ','
char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 184 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0                 db      $E0,$90,$E0,$90,$E0

char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
0MEMORYADDR0                 db      $30,$48,$C0,$48,$30

char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 192 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 48 (@0)
0MEMORYADDR0                 db      $38,$48,$20,$90,$E0

char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 72 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 224 (@0)
0MEMORYADDR0                 db      $00,$38,$00,$E0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 56 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 db      $20,$20,$D8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 216 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $20,$70,$A8,$20,$20

char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 168 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 32 (@0)
0MEMORYADDR0                 db      $C8,$D0,$20,$58,$98

char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 208 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 88 (@0)
char ','
char '$'
stackarg 152 (@0)
0MEMORYADDR0                 db      $00,$70,$50,$70,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 112 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0                 

0MEMORYADDR0 ;8 bytes available here

0MEMORYADDR0 

0MEMORYADDR0 		org	$f00

char '$'
stackarg 3840 (@0)
0MEMORYADDR0 blitparm:				

0MEMORYADDR0 		db	$82,19,96,$16,$8,$08,00,00

char '$'
stackarg 130 (@0)
char ','
char '1'
stackarg 19 (@0)
char ','
char '9'
stackarg 96 (@0)
char ','
char '$'
stackarg 22 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '$'
stackarg 8 (@0)
char ','
char '0'
stackarg 0 (@0)
char ','
char '0'
stackarg 0 (@0)
0MEMORYADDR0 blitdata:

0MEMORYADDR0 		db	$00,$45,$F0,$41,$E1,$01,$F7,$80,$44,$20,$40,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 225 (@0)
char ','
char '$'
stackarg 1 (@0)
char ','
char '$'
stackarg 247 (@0)
char ','
char '$'
stackarg 128 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$00,$41,$13,$81,$04,$40,$A4,$20,$A0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 19 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 164 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 160 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$7D,$E0,$41,$E4,$41,$E7,$81,$14,$21,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 125 (@0)
char ','
char '$'
stackarg 224 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 231 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 20 (@0)
char ','
char '$'
stackarg 33 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$04,$41,$07,$C1,$04,$41,$F4,$21,$F0,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 7 (@0)
char ','
char '$'
stackarg 193 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 33 (@0)
char ','
char '$'
stackarg 240 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$45,$f3,$81,$04,$41,$F4,$41,$17,$BD,$10,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 243 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 189 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$F8,$8E,$F1,$C8,$BA,$1E,$04,$50,$72,$22,$3C,$F8

char '$'
stackarg 248 (@0)
char ','
char '$'
stackarg 142 (@0)
char ','
char '$'
stackarg 241 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 186 (@0)
char ','
char '$'
stackarg 30 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 114 (@0)
char ','
char '$'
stackarg 34 (@0)
char ','
char '$'
stackarg 60 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0 		db	$81,$44,$8A,$28,$92,$11,$03,$90,$82,$45,$22,$80

char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 138 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 3 (@0)
char ','
char '$'
stackarg 144 (@0)
char ','
char '$'
stackarg 130 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 34 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0 		db	$F2,$24,$F2,$0F,$92,$11,$74,$50,$73,$88,$BC,$F0

char '$'
stackarg 242 (@0)
char ','
char '$'
stackarg 36 (@0)
char ','
char '$'
stackarg 242 (@0)
char ','
char '$'
stackarg 15 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 116 (@0)
char ','
char '$'
stackarg 80 (@0)
char ','
char '$'
stackarg 115 (@0)
char ','
char '$'
stackarg 136 (@0)
char ','
char '$'
stackarg 188 (@0)
char ','
char '$'
stackarg 240 (@0)
0MEMORYADDR0 		db	$83,$E4,$8A,$28,$92,$11,$07,$D0,$0A,$4F,$A2,$80

char '$'
stackarg 131 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 138 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 146 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 7 (@0)
char ','
char '$'
stackarg 208 (@0)
char ','
char '$'
stackarg 10 (@0)
char ','
char '$'
stackarg 79 (@0)
char ','
char '$'
stackarg 162 (@0)
char ','
char '$'
stackarg 128 (@0)
0MEMORYADDR0 		db	$82,$2E,$89,$C8,$BB,$DE,$04,$5E,$72,$28,$A2,$F8

char '$'
stackarg 130 (@0)
char ','
char '$'
stackarg 46 (@0)
char ','
char '$'
stackarg 137 (@0)
char ','
char '$'
stackarg 200 (@0)
char ','
char '$'
stackarg 187 (@0)
char ','
char '$'
stackarg 222 (@0)
char ','
char '$'
stackarg 4 (@0)
char ','
char '$'
stackarg 94 (@0)
char ','
char '$'
stackarg 114 (@0)
char ','
char '$'
stackarg 40 (@0)
char ','
char '$'
stackarg 162 (@0)
char ','
char '$'
stackarg 248 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$79,$17,$81,$17,$DF,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 121 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 223 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$44,$E4,$41,$11,$10,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 68 (@0)
char ','
char '$'
stackarg 228 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$45,$17,$81,$11,$1E,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 23 (@0)
char ','
char '$'
stackarg 129 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 30 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$45,$F4,$41,$11,$10,$00,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 69 (@0)
char ','
char '$'
stackarg 244 (@0)
char ','
char '$'
stackarg 65 (@0)
char ','
char '$'
stackarg 17 (@0)
char ','
char '$'
stackarg 16 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 		db	$00,$00,$00,$79,$14,$40,$E1,$1F,$20,$00,$00,$00

char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 121 (@0)
char ','
char '$'
stackarg 20 (@0)
char ','
char '$'
stackarg 64 (@0)
char ','
char '$'
stackarg 225 (@0)
char ','
char '$'
stackarg 31 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
char ','
char '$'
stackarg 0 (@0)
0MEMORYADDR0 

0MEMORYADDR0 ;4 bytes available here

0MEMORYADDR0 

0MEMORYADDR0 		org	$ff0

char '$'
stackarg 4080 (@0)
0MEMORYADDR0 		db	$53,$65,$61,$6e,$20,$52,$69,$64,$64,$6c,$65,$20,$32,$30,$30,$34

char '$'
stackarg 83 (@0)
char ','
char '$'
stackarg 101 (@0)
char ','
char '$'
stackarg 97 (@0)
char ','
char '$'
stackarg 110 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 82 (@0)
char ','
char '$'
stackarg 105 (@0)
char ','
char '$'
stackarg 100 (@0)
char ','
char '$'
stackarg 100 (@0)
char ','
char '$'
stackarg 108 (@0)
char ','
char '$'
stackarg 101 (@0)
char ','
char '$'
stackarg 32 (@0)
char ','
char '$'
stackarg 50 (@0)
char ','
char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 48 (@0)
char ','
char '$'
stackarg 52 (@0)

Complete.
